= 開発環境構築手順書
[2013-07-01 09:43] 
# 目的
+  AWSでステージング環境を構築してRailsアプリの開発をできるようにする。
 
# 前提条件
+ AmazonWebService(AWS)が利用可能である。
+ AWSアカウントが作成済みである。
+ ドメイン管理をRoute53に移行している。
+ ソフトウェアバージョン

| ソフトウェア     | バージョン    | 備考        |
|:---------------|:-------------|:------------|
| AmazonLinux    |AMI 2013.03.1 |       |
| Ruby           |1.9.3p392     |       |
| Rails          |3.2.13        |       |
| Apache         |2             |       |
| Passenger      |4.0.5         |       |
| MySQL          |5.5.31        |       |

# 構成
* [インフラストラクチャ](#section1)

  * [AWS環境の構築](#section1-1)
  
      * [ローカル環境の設定](#section1-1-1)    
      * [EC2インスタンス作成](#section1-1-2)    
      * [Elastic IPの割当](#section1-1-3)   
      * [Route53でホスト名の割当](#section1-1-4)    
      * [RDSインスタンスの作成](#section1-1-5)
    
  
* [ソフトウェア](#section2)

  * [OSの設定](#section2-1)
  
  * [アプリケーションの設定](#section2-2)
      * [ローカル環境の構築](#section2-2-1)
            * [Rubyのインストール](#section2-2-1-1)
            * [Railsのインストール](#section2-2-1-2)
            * [RSpecのインストール](#section2-2-1-3)
            * [Capybara-webkitのインストール](#section2-2-1-4)
            * [Cucumberのインストール](#section2-2-1-5)
            * [FactoryGirlのインストール](#section2-2-1-6)
            * [Pryのインストール](#section2-2-1-7)
            * [Sportのインストール](#section2-2-1-8)
            * [Guardのインストール](#section2-2-1-9)
            * [コードカバレッジ分析ツールのインストール](#section2-2-1-10)
            * [コード品質検査ツールのインストール](#section2-2-1-11)
            * [ドキュメント生成ツールのインストール](#section2-2-1-12)
      * [ステージング環境の構築](#section2-2-2)
          * [各種パッケージのインストール](#section2-2-2-1)
          * [libyamlのインストール](#section2-2-2-2)
          * [Ruby 1.9.3のインストール](#section2-2-2-3)
          * [Railsアプリケーションサーバのセットアップ](#section2-2-2-4)
          * [railsユーザーの設定](#section2-2-2-5)
          * [ApacheとPhusion Passengerのセットアップ](#section2-2-2-6)
          * [staging環境のデータベースの準備](#section2-2-2-7)
          * [Gemfileの追加](#section2-2-2-8)
          * [Capistranoの設定フィルを生成](#section2-2-2-9)
          * [Capistrano共通のデプロイ設定](#section2-2-2-10)
          * [Capistrano Staging環境のデプロイ設定](#section2-2-2-11)
          * [メンテナンス画面の設定](#section2-2-2-12)
          * [DB設定](#section2-2-2-13)
          * [デプロイ前のチェックリスト](#section2-2-2-14)
          * [デプロイ手順](#section2-2-2-15)

# 詳細
## <a name="section1">インフラストラクチャ
### <a name="section1-1">AWS環境の構築
#### <a name="section1-1-1">ローカル環境の設定
##### コマンドラインツールの設定
###### コマンドラインツールをダウンロードする。
[Amazon EC2 API Tools](http://aws.amazon.com/developertools/351)
   
###### コマンドラインツールをセットアップする。
1. Javaのパスを設定する。
 ローカル環境のJavaのパスをコマンドラインツールに教える
    
        $ export JAVA_HOME=/'Javaのパス'
    
 Javaのバージョンは1.6かそれ以上
    
        $ java -version
    
1. コマンドラインツールの場所を設定する。  
 ダウンロードしたコマンドラインツールを配置した場所<path-to-tools>を設定する。
    
        $ export EC2_HOME=<path-to-tools>
    
1. アクセス証明書の設定をする。
 以下のページからX.509証明書の作成を依頼してアクセスキーIDとシークレットアクセスキーをダウロードする。
 [アクセス証明書](https://portal.aws.amazon.com/gp/aws/securityCredentials)
![X.509証明書の作成](https://dev.k2-works.net/attachments/download/10/I-0001.png)

        $ export AWS_PRIVATE_KEY=your-aws-access-key
        $ export AWS_CERT=your-aws-secret-key
    
1. 起動スクリプト(initaws)を作成する。
  
        #!/bin/bash
        # AWS Common
        export JAVA_HOME="Javaのパス"
        export EC2_KEY_DIR="アクセスキーIDとシークレットアクセスキーを保存しているパス"
        export EC2_PRIVATE_KEY="${EC2_KEY_DIR}/アクセスキーIDファイル名"
        export EC2_CERT="${EC2_KEY_DIR}/シークレットアクセスキーファイル名"
        # EC2
        export EC2_HOME="コマンドラインツールを保存している場所"
        export EC2_URL=https://ec2.ap-northeast-1.amazonaws.com
        
1. コマンドラインツールが動作するか確認する。
  
        $ source initaws
        $ ec2-describe-regions

##### SSHクライアントをインストールする
##### 参照
[コマンドラインツール設定（英語)](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/SettingUp_CommandLine.html#set_aes_home_linux)
[About AWS Security Credentials](http://docs.aws.amazon.com/AWSSecurityCredentials/1.0/AboutAWSCredentials.html#AccessKeys)
#### <a name="section1-1-2">EC2インスタンス作成

1. AWSマネジメントコンソールからEC2を選択してLaunch Instanceを押す。

    ![Step0](https://dev.k2-works.net/attachments/download/19/I-0002-1.png)

1. Amazon Linux AMIを選択するしてContinueを押す。

    ![Step1](https://dev.k2-works.net/attachments/download/11/I-0002.png)

1. Continueを押す。

    ![Step2](https://dev.k2-works.net/attachments/download/12/I-0003.png)

1. Continueを押す。

    ![Step3](https://dev.k2-works.net/attachments/download/13/I-0004.png)

1. Continueを押す。

    ![Step4](https://dev.k2-works.net/attachments/download/14/I-0005.png)

1. 名前を入力してContinueを押す。

    ![Step5](https://dev.k2-works.net/attachments/download/15/I-0006.png)

1. Key Pairs daito-devを使う。

    ![Step6](https://dev.k2-works.net/attachments/download/16/I-0007.png)

1. セキュリテリグループはDaito-Dev-GRを選択する。

    ![Step7](https://dev.k2-works.net/attachments/download/17/I-0008.png)

1. Lanchを押す。

    ![Step8](https://dev.k2-works.net/attachments/download/18/I-0009.png)

1. Closeを押す。

    ![Step9](https://dev.k2-works.net/attachments/download/20/I-0010.png)

#### <a name="section1-1-3">Elastic IPの割当
1. AWSマネジメントコンソールのEC2よりElastic IPsを選択する。

    ![Step](https://dev.k2-works.net/attachments/download/21/I-0011.png)
    
1. Allocate New Addressボタンを押して新規Elastic IPアドレスを作成する。

   ![Step](https://dev.k2-works.net/attachments/download/22/I-0012.png)

1. 新規作成したElasticIPアドレスを選択してAssociate Addressを押す。

    ![Step](https://dev.k2-works.net/attachments/download/23/I-0013.png)

1. Instanceを開発環境に割り当ててYes,Associateを押す。

    ![Step](https://dev.k2-works.net/attachments/download/24/I-0014.png)

#### <a name="section1-1-4">Route53でホスト名の割当

#### <a name="section1-1-5">RDSインスタンスの作成
1. AWSコンソール画面よりRDSを選択する。

    ![](https://dev.k2-works.net/attachments/download/31/I-0015.png)
1. InstanceメニューよりLaunch DB Instanceを押す。

    ![](https://dev.k2-works.net/attachments/download/32/I-0016.png)

1. MySQLを選択する。

    ![](https://dev.k2-works.net/attachments/download/33/I-0017.png)

1. 必要項目を入力してContinueを押す。

   ![](https://dev.k2-works.net/attachments/download/34/I-0018.png)

1. Continueを押す。

   ![](https://dev.k2-works.net/attachments/download/35/I-0019.png)

1. Continueを押す。

    ![](https://dev.k2-works.net/attachments/download/36/I-0020.png)

1. Launch DB Instanceを押す。

    ![](https://dev.k2-works.net/attachments/download/37/I-0021.png)

1. 作成したDBインスタンスの日本語設定をするためPrarmeter GroupsからCreate DB Parameter Groupを押す。

   ![](https://dev.k2-works.net/attachments/download/38/I-0022.png)

1. Yes,Createを押す。
    ![](https://dev.k2-works.net/attachments/download/39/I-0023.png)

1. Create DB Parameter Groupを押す。

    ![](https://dev.k2-works.net/attachments/download/40/I-0024.png)

1. 以下の項目をutf8に設定する。

    ![](https://dev.k2-works.net/attachments/download/41/I-0025.png)
    
1. 最初に作成したDBインスタンスを選択してModiyを実行する。

    ![](https://dev.k2-works.net/attachments/download/42/I-0026.png)

1. Parameter Groupを作成したParameter Groupに変更してContinueを押す。

    ![](https://dev.k2-works.net/attachments/download/43/I-0027.png)

1. Modifiy DB Instanceを押す。

   ![](https://dev.k2-works.net/attachments/download/44/I-0028.png)

1. EC2インスタンスメニューに戻りSecurity GroupsよりDaito-Dev-GRを選択してMYSQLを追加する。

   ![](https://dev.k2-works.net/attachments/download/45/I-0029.png)

## <a name="section2">ソフトウェア
### <a name="section2-1">OSの設定
1. yumのアップデート

        $ yum check-updates
        $ sudo yum update

1. SQLクライアントのインストール及び接続の確認

        $ yum search MySQL | grep 'client'
        $ sudo yum install mysql55.x86_64
        $ mysql -h development.cfxq9mnwsm8s.ap-northeast-1.rds.amazonaws.com -P 3306 -u devdaito -p development

#### sshログイン設定
   ローカル

    $ ssh-keygen
    $ scp -i daito-dev.pem ~/.ssh/id_rsa.pub ec2-user@54.250.157.204:~

   リモート

    $ cat id_rsa.pub >> .ssh/authorized_keys
    $ rm id_rsa.pub
    
   ローカル

    $ ssh ec2-user@54.250.157.204
    
#### 起動スクリプトの追加
1. .ec2ディレクトリの作成
   リモート
   
        $ mkdir .ec2
        
1. 認証ファイルのコピー
   ローカル

        $ scp -i daito-dev.pem daito.ai-hide.net/pk-RQD5MX5D2YLOVDC27GMN2IHHGCAO255A.pem ec2-user@54.250.157.204:~/.ec2/
        $ scp -i daito-dev.pem daito.ai-hide.net/cert-RQD5MX5D2YLOVDC27GMN2IHHGCAO255A.pem ec2-user@54.250.157.204:~/.ec2/
                
1. ec2-api-toolsのコピー
   AmazonLinuxの場合既に導入されているので不要
1. perlのインストール
   AmazonLinuxの場合既に導入されているので不要
1. jdkのインストール
   AmazonLinuxの場合既に導入されているので不要
1. 起動スクリプトの作成
   以下のスクリプトファイルをリモートにアップロードする

        #!/bin/bash
        ### BEGIN INIT INFO
        # Provides:          ec2-instance-provisioning
        # Required-Start:    $network $local_fs
        # Required-Stop:     $apache2
        # Should-Start:      $named
        # Should-Stop:
        # Default-Start:     2 3 4 5
        # Default-Stop:      0 1 6
        # Short-Description: ec2 houskeeping
        # Description:       attach elastic id on start
        ### END INIT INFO

        #        
        # ec2-elastic - do some ec2 houskeeping
        #     (attaching/detaching volumes, mounting volumes, etc.)
        #

        export EC2_KEY_DIR=/root/.ec2
        export EC2_PRIVATE_KEY=${EC2_KEY_DIR}/pk-RQD5MX5D2YLOVDC27GMN2IHHGCAO255A.pem
        export EC2_CERT=${EC2_KEY_DIR}/cert-RQD5MX5D2YLOVDC27GMN2IHHGCAO255A.pem
        export EC2_URL="https://ec2.ap-northeast-1.amazonaws.com"
        MAX_TRIES=60
        
        prog=$(basename $0)
        logger="logger -t $prog"
        curl="curl --retry 3 --silent --show-error --fail"
        # this URL gives us information about the current instance
        instance_data_url=http://169.254.169.254/latest
        region="ap-northeast-1"
        elastic_ip=54.250.157.204
        
        #Wait until networking is up on the EC2 instance.
        perl -MIO::Socket::INET -e '
         until(new IO::Socket::INET("169.254.169.254:80"))
         {print"Waiting for network...\n";sleep 1}
        ' | $logger
        
        # start/stop functions for OS

        start() {
            ctr=0
            # because the instance might change we have to get the id dynamically
            instance_id=$($curl $instance_data_url/meta-data/instance-id)
            /bin/echo "Associating Elastic IP."
            ec2-associate-address $elastic_ip -i $instance_id  --region=$region
        }

        stop() {
            /bin/echo "Diassociating Elastic IP."
            ec2-disassociate-address $elastic_ip --region=$region

        }

        case "$1" in
            start)
                start
                ;;
        
            stop)
                stop
                ;;
            restart)
                stop
                sleep 5
                start
                ;;
            *)
                echo "Using: $SELF {start|stop|restart}"
                exit 1
                ;;
        
            esac
        
        exit 0

    ローカル

        $ scp -i daito-dev.pem daito.ai-hide.net/ec2 ec2-user@54.250.157.204:~/.ec2/
   
1. 起動スクリプトの設定
   リモート

        $ sudo su
        # mdkir .ec2
        # cp -r /home/ec2-user/.ec2/* .ec2/
        # cp .ec2/ec2 /etc/init.d/
        # chkconfig --add ec2
        # chkconfig ec2 on              

    インスタンス再起動後にElasticIPが割り付けられていればOK
    
### <a name="section2-2">アプリケーションの設定
#### <a name="section2-2-1">ローカル環境の構築
##### <a name="section2-2-1-1">Rubyのインストール
1. RVMのインストール
  RVMのインストールに関しては[Installing RVM](https://rvm.io/rvm/install)を参照。

1. rubyのインストール

        $ rvm install 1.9.3-p392
        $ rvm gemset create hcoss
        $ rvm use --default 1.9.3-p392@hcoss

##### <a name="section2-2-1-2">Railsのインストール
1. railsのインストール

        $ gem install rails --version"=3.2.13" bundler

1. 開発プロジェクトで指定されたGemsetのバージョンを使えるようにする。

        $ mkdir daito.ai-hide.net
        $ cd daito.ai-hide.net
        $ mkdir hcoss
        $ cd hcoss
        $ echo ruby-1.9.3-p392@hcoss > .rvmrc
        $ cd ..
        $ cd hcoss

    上記の設定後、初めてアクセスすると以下のようにtrustするかを訊かれるので、YESと答える。
    もし処理が進まない場合は中断してhcossディレクトリ内で下記のコマンドを実行
    
        $ mv .rvmrc .ruby-version

    rubyのバージョンとGemsetを確認する。

        $ ruby -v
        $ gem env gemdir

1. Railsプロジェクトを作成する。

        $ cd ~/projects/daito.ai-hide.net/hcoss/
        $ rails new .

##### <a name="section2-2-1-3">RSpecのインストール
1. RSpecをインストールするためGemfileを編集する。

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
        end

1. bundlerによりRSpecをインストールする。

        $ bundle install

1. RSpecをこのプロジェクトで使うためのファイルを生成する。

        $ rails g rspec:install

1. .rpecファイルの作成

        $ echo '--color --drb -f d' > .rspec

##### <a name="section2-2-1-4">Capybara-webkitのインストール
1. capybara-webkitと依存関係にあるQtをインストールする。

        $ sudo apt-get install libqt4-dev libqtwebkit-dev

1. Gemfileを編集する。

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'         
        end

        group :test do
         gem 'capybara-webkit'
        end

1. bundlerでインストールする。

        $ bundle install

1. spec/spec_helper.rbを編集する。
   以下の設定cnfig.order = "random"以下に加える

        config.before(:suite) do
         DatabaseCleaner.strategy = :truncation
         DatabaseCleaner.clean_with(:truncation)
        end
      
        config.before(:each) do
         DatabaseCleaner.start
        end
        config.after(:each) do
         DatabaseCleaner.clean
        end

1. capybara-webkitのための設定を加える。

        config.before(:suite) do
         DatabaseCleaner.strategy = :truncation
         DatabaseCleaner.clean_with(:truncation)
        end
      
        config.before(:each) do
         DatabaseCleaner.start
        end
        config.after(:each) do
         DatabaseCleaner.clean
        end
        Capybara.javascript_driver = :webkit

1. RSpecの実行
以下のコマンドはプロジェクト内でアプリを生成していないと動作しない。

        $ rake db:setup
    
        $ rake spec
    
##### <a name="section2-2-1-5">Cucumberのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
        end

1. bundlerでインストールする

        $ bundle install

1. Cucumberをこのプロジェクトで使うためのファイルを生成する。

        $ rails g cucumber:install

1. Cucumberを実行する
以下のコマンドはプロジェクト内でアプリを生成していないと動作しない。

        $ rake cucumber

##### <a name="section2-2-1-6">FactoryGirlのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
        end

1. bundlerでインストールする

        $ bundle install

1. application.rbの設定
config/application.rb内のclass Application < Rails::Application内に以下の内容を追加。

        # generatorの設定
        config.generators do |g|
         g.test_framework  :rspec, :fixture => true
         g.fixture_replacement :factory_girl, :dir => "spec/factories"
         g.view_specs false
         g.controller_specs false
         g.helper_specs false
         g.routing_specs false
         g.request_specs false
        end
         
##### <a name="section2-2-1-7">Pryのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
         # Railsコンソールの多機能版
         gem 'pry-rails'
         # pryの入力に色付け
         gem 'pry-coolline'
         # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
         gem 'pry-remote'
         gem "pry-debugger"
         gem "pry-doc"
         gem 'pry-stack_explorer'
         # PryでのSQLの結果を綺麗に表示
         gem 'hirb'
         gem 'hirb-unicode'
         # pryの色付けをしてくれる
         gem 'awesome_print'
        end

1. bundlerでインストールする

        $ bundle install

1. development.rbの設定
config/environments/development.rbの中のHcoss::Application.configureに以下を追加。

        silence_warnings do
         begin
           require 'pry'
           IRB = Pry
         rescue LoadError
         end
        end

1. ~/.pryrcへ追記

        # -*- coding: utf-8 -*-
        # awesome_printの色付けの設定
        require "awesome_print"
        AwesomePrint.pry!

        # pry-debuggerのショートカット
        Pry.commands.alias_command 'c', 'continue'
        Pry.commands.alias_command 's', 'step'
        Pry.commands.alias_command 'n', 'next'
        Pry.commands.alias_command 'f', 'finish'

        # hirbの設定
        begin
         require 'hirb'
        rescue LoadError
        # Missing goodies, bummer
        end

        if defined? Hirb
          # Slightly dirty hack to fully support in-session Hirb.disable/enable toggling
          Hirb::View.instance_eval do
            def enable_output_method
              @output_method = true
              @old_print = Pry.config.print
              Pry.config.print = proc do |output, value|
                Hirb::View.view_or_page_output(value) || @old_print.call(output, value)
              end
            end
    
            def disable_output_method
              Pry.config.print = @old_print
              @output_method = nil
            end
          end
  
          Hirb.enable
        end

##### <a name="section2-2-1-8">Sportのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
         # Railsコンソールの多機能版
         gem 'pry-rails'
         # pryの入力に色付け
         gem 'pry-coolline'
         # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
         gem 'pry-remote'
         gem "pry-debugger"
         gem "pry-doc"
         gem 'pry-stack_explorer'
         # PryでのSQLの結果を綺麗に表示
         gem 'hirb'
         gem 'hirb-unicode'
         # pryの色付けをしてくれる
         gem 'awesome_print'
         # 設定をロードしたサーバーによってテストを高速化
         gem 'spork'
        end

1. bundlerでインストールする

        $ bundle install

1. spec/spec_helperの編集
一通りSpork.prefork do・・・endに入れる

        # -*- coding: utf-8 -*-        
        # This file is copied to spec/ when you run 'rails generate rspec:install'
        ENV["RAILS_ENV"] ||= 'test'
        require File.expand_path("../../config/environment", __FILE__)
        require 'rspec/rails'
        require 'rspec/autorun'
        require 'rubygems'
        require 'spork'
        
        #uncomment the following line to use spork with the debugger
        #require 'spork/ext/ruby-debug'

        # Requires supporting ruby files with custom matchers and macros, etc,
        # in spec/support/ and its subdirectories.
        Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }

        Spork.prefork do
          # Loading more in this block will cause your tests to run faster. However,
          # if you change any configuration or code from libraries loaded here, you'll
          # need to restart spork for it take effect.

          RSpec.configure do |config|
            # ## Mock Framework
            #
            # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
            #
            # config.mock_with :mocha
            # config.mock_with :flexmock
            # config.mock_with :rr

            # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
            config.fixture_path = "#{::Rails.root}/spec/fixtures"

            # If you're not using ActiveRecord, or you'd prefer not to run each of your
            # examples within a transaction, remove the following line or assign false
            # instead of true.
            config.use_transactional_fixtures = true

            # If true, the base class of anonymous controllers will be inferred
            # automatically. This will be the default behavior in future versions of
            # rspec-rails.
            config.infer_base_class_for_anonymous_controllers = false

            # Run specs in random order to surface order dependencies. If you find an
            # order dependency and want to debug it, you can fix the order by providing
            # the seed, which is printed after each run.
            #     --seed 1234
            config.order = "random"

            config.before(:suite) do
              DatabaseCleaner.strategy = :truncation
              DatabaseCleaner.clean_with(:truncation)
            end
      
            config.before(:each) do
              DatabaseCleaner.start
            end
            config.after(:each) do
              DatabaseCleaner.clean
            end
            Capybara.javascript_driver = :webkit  
          end
        end

        Spork.each_run do
          # This code will be run each time you run your specs.
        end

1. sporkの初期設定。

        $ bundle exec spork --bootstrap

1. sporkのテスト。(起動が確認できたらCtrl + Cで停止させてください)

        $ bundle exec spork

##### <a name="section2-2-1-9">Guardのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
         # Railsコンソールの多機能版
         gem 'pry-rails'
         # pryの入力に色付け
         gem 'pry-coolline'
         # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
         gem 'pry-remote'
         gem "pry-debugger"
         gem "pry-doc"
         gem 'pry-stack_explorer'
         # PryでのSQLの結果を綺麗に表示
         gem 'hirb'
         gem 'hirb-unicode'
         # pryの色付けをしてくれる
         gem 'awesome_print'
         # 設定をロードしたサーバーによってテストを高速化
         gem 'spork'
         # ファイルの変更を監視してPowサーバを再起動
         gem 'guard-pow'
         # ファイルの変更を監視してテストを自動化
         gem 'guard-rspec'
         # 設定ファイルの変更を監視してテストサーバーを再起動
         gem 'guard-spork'
         # Gemfileを監視して、変更があったら自動でbundle installを実行
         gem 'guard-bundler'
        end

        group :test do
         gem 'capybara-webkit'
        end

1. bundlerでインストールする

        $ bundle install

1. Guardfileの作成。

        $ bundle exec guard init

1. Guardfileに以下の項目を追加

        guard 'rspec' do
         # rakeファイルの更新監視
         watch(%r{^lib/(.+)\.rake$})     { |m| "spec/lib/#{m[1]}_rake_spec.rb" }
        end

        # 全体テストをしないようにする(全体テストは、guardが動いてる所でEnterすると実行)
        # guard 'rspec' doを以下に書換え
        guard 'rspec', :version => 2, :cli => "--drb", :all_after_pass => false, :all_on_start => false do

##### <a name="section2-2-1-10">コードカバレッジ分析ツールのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
         # Railsコンソールの多機能版
         gem 'pry-rails'
         # pryの入力に色付け
         gem 'pry-coolline'
         # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
         gem 'pry-remote'
         gem "pry-debugger"
         gem "pry-doc"
         gem 'pry-stack_explorer'
         # PryでのSQLの結果を綺麗に表示
         gem 'hirb'
         gem 'hirb-unicode'
         # pryの色付けをしてくれる
         gem 'awesome_print'
         # 設定をロードしたサーバーによってテストを高速化
         gem 'spork'
         # ファイルの変更を監視してPowサーバを再起動
         gem 'guard-pow'
         # ファイルの変更を監視してテストを自動化
         gem 'guard-rspec'
         # 設定ファイルの変更を監視してテストサーバーを再起動
         gem 'guard-spork'
         # Gemfileを監視して、変更があったら自動でbundle installを実行
         gem 'guard-bundler'
        end

        group :test do
         gem 'capybara-webkit'
         #コードカバレッジ分析ツール
         gem 'simplecov', :require => false
         gem 'simplecov-rcov', :require => false
        end

1. bundlerでインストールする

        $ bundle install

1. spec/spec_helper.rbを編集する。

        # -*- coding: utf-8 -*-        
        # This file is copied to spec/ when you run 'rails generate rspec:install'
        ENV["RAILS_ENV"] ||= 'test'
        require File.expand_path("../../config/environment", __FILE__)
        require 'rspec/rails'
        require 'rspec/autorun'
        require 'rubygems'
        require 'spork'
        require 'simplecov'
        require 'simplecov-rcov'
        SimpleCov.formatter = SimpleCov::Formatter::RcovFormatter
        SimpleCov.start 'rails'        
        
        #uncomment the following line to use spork with the debugger
        #require 'spork/ext/ruby-debug'

        # Requires supporting ruby files with custom matchers and macros, etc,
        # in spec/support/ and its subdirectories.
        Dir[Rails.root.join("spec/support/**/*.rb")].each { |f| require f }

        Spork.prefork do
          # Loading more in this block will cause your tests to run faster. However,
          # if you change any configuration or code from libraries loaded here, you'll
          # need to restart spork for it take effect.

          RSpec.configure do |config|
            # ## Mock Framework
            #
            # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
            #
            # config.mock_with :mocha
            # config.mock_with :flexmock
            # config.mock_with :rr

            # Remove this line if you're not using ActiveRecord or ActiveRecord fixtures
            config.fixture_path = "#{::Rails.root}/spec/fixtures"

            # If you're not using ActiveRecord, or you'd prefer not to run each of your
            # examples within a transaction, remove the following line or assign false
            # instead of true.
            config.use_transactional_fixtures = true

            # If true, the base class of anonymous controllers will be inferred
            # automatically. This will be the default behavior in future versions of
            # rspec-rails.
            config.infer_base_class_for_anonymous_controllers = false

            # Run specs in random order to surface order dependencies. If you find an
            # order dependency and want to debug it, you can fix the order by providing
            # the seed, which is printed after each run.
            #     --seed 1234
            config.order = "random"

            config.before(:suite) do
              DatabaseCleaner.strategy = :truncation
              DatabaseCleaner.clean_with(:truncation)
            end
      
            config.before(:each) do
              DatabaseCleaner.start
            end
            config.after(:each) do
              DatabaseCleaner.clean
            end
            Capybara.javascript_driver = :webkit  
          end
        end

        Spork.each_run do
          # This code will be run each time you run your specs.
        end

        
##### <a name="section2-2-1-11">コード品質検査ツールのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
         # Railsコンソールの多機能版
         gem 'pry-rails'
         # pryの入力に色付け
         gem 'pry-coolline'
         # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
         gem 'pry-remote'
         gem "pry-debugger"
         gem "pry-doc"
         gem 'pry-stack_explorer'
         # PryでのSQLの結果を綺麗に表示
         gem 'hirb'
         gem 'hirb-unicode'
         # pryの色付けをしてくれる
         gem 'awesome_print'
         # 設定をロードしたサーバーによってテストを高速化
         gem 'spork'
         # ファイルの変更を監視してPowサーバを再起動
         gem 'guard-pow'
         # ファイルの変更を監視してテストを自動化
         gem 'guard-rspec'
         # 設定ファイルの変更を監視してテストサーバーを再起動
         gem 'guard-spork'
         # Gemfileを監視して、変更があったら自動でbundle installを実行
         gem 'guard-bundler'
         # コード品質検査ツール         
         gem 'rails_best_practices', :require => false
        end

        group :test do
         gem 'capybara-webkit'
         #コードカバレッジ分析ツール
         gem 'simplecov', :require => false
         gem 'simplecov-rcov', :require => false
        end

1. bundlerでインストールする

        $ bundle install

1. 検査の実施

        $ rails_best_practices

##### <a name="section2-2-1-12">ドキュメント生成ツールのインストール
1. Gemfileを編集する

        group :test, :development do
         # 単体テスト
         gem 'rspec-rails', '~>2.0'
         # テスト環境のテーブルをきれいにする
         gem 'database_cleaner'
         # 受け入れテスト
         gem 'cucumber-rails', '~>1.3.1', :require => false
         # fixtureの代わり
         gem "factory_girl_rails"
         # Railsコンソールの多機能版
         gem 'pry-rails'
         # pryの入力に色付け
         gem 'pry-coolline'
         # コードに"binding.remote_pry(rspec内ではbinding.pry_remote)" => pry-remoteでpryに入れます。
         gem 'pry-remote'
         gem "pry-debugger"
         gem "pry-doc"
         gem 'pry-stack_explorer'
         # PryでのSQLの結果を綺麗に表示
         gem 'hirb'
         gem 'hirb-unicode'
         # pryの色付けをしてくれる
         gem 'awesome_print'
         # 設定をロードしたサーバーによってテストを高速化
         gem 'spork'
         # ファイルの変更を監視してPowサーバを再起動
         gem 'guard-pow'
         # ファイルの変更を監視してテストを自動化
         gem 'guard-rspec'
         # 設定ファイルの変更を監視してテストサーバーを再起動
         gem 'guard-spork'
         # Gemfileを監視して、変更があったら自動でbundle installを実行
         gem 'guard-bundler'
         # コード品質検査ツール         
         gem 'rails_best_practices', :require => false
         # ドキュメント生成ツール
         gem 'yard', :require => false
        end

        group :test do
         gem 'capybara-webkit'
         #コードカバレッジ分析ツール
         gem 'simplecov', :require => false
         gem 'simplecov-rcov', :require => false
        end

1. bundlerでインストールする

        $ bundle install

1. ドキュメント生成の実施

        $ yard doc

#### <a name="section2-2-2">ステージング環境の構築
###### <a name="section2-2-2-1">各種パッケージのインストール

    $ yum update

    $ yum -y install gcc gcc-c++ autoconf git

    $ yum -y install openssl-devel zlib-devel readline-devel curl-devel gettext-devel

    $ yum -y install httpd-devel sqlite-devel

    $ yum install libxml2-devel

    $ yum install libxslt-devel

###### <a name="section2-2-2-2">libyamlのインストール

    $ cd /usr/local/src

    $ wget http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz

    $ tar xzf yaml-0.1.4.tar.gz

    $ cd yaml-0.1.4

    $ ./configure

    $ make && make install

ここまでrootユーザー
###### <a name="section2-2-2-3">Ruby 1.9.3のインストール
ここからsudoユーザー

    % mkdir ~/src

    % cd ~/src

    % wget http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p392.tar.gz

    % tar xzf ruby-1.9.3-p392.tar.gz

    % cd ruby-1.9.3-p392

    % ./configure

    % make

    % sudo make install

###### <a name="section2-2-2-4">Railsアプリケーションサーバのセットアップ
###### <a name="section2-2-2-5">railsユーザーの設定
1. railsユーザーの作成

        $ sudo useradd -m -d /var/rails rails

        $ sudo passwd rails

        $ sudo chmod 750 /var/rails

1. Apache実行ユーザーをグループに追加

        $ sudo gpasswd -a apache rails

1. Bundlerのインストール

        $ sudo gem install bundler --no-ri --no-rdoc

    gemが無いとエラーが出た場合は sudo /usr/local/bin/gem install bundler --no-ri --no-rdoc

        $ sudo su

        $ cd ~

        $ vi .bash_profile

    PATH=$PATH:$HOME/bin:/usr/local/binを追加

        $ souce .bash_profile


###### <a name="section2-2-2-6">ApacheとPhusion Passengerのセットアップ
1. Phusion Passengerのインストール

        $ sudo gem install passenger --no-ri --no-rdoc

        $ sudo passenger-install-apache2-module

1. Apacheの準備

        % sudo su

        $ cd /etc/httpd

        $ echo "Include /etc/httpd/sites-enabled/" >> conf/httpd.conf

        $ mkdir sites-available

        $ mkdir sites-enabled

        $ rm conf.d/welcome.conf

    エディタで /etc/httpd/conf/httpd.conf を開き

        #ServerName www.example.com:80
    
    という箇所のコメント記号（#）を取り除いてください。

    また、

        #NameVirtualHost *:80

    のコメント記号（#）を取り除いてください。

1. Phusion PassengerをApacheに組み込む
新規ファイル /etc/httpd/conf.d/passenger.conf に次の内容を書き込みます。

        LoadModule passenger_module /usr/local/lib/ruby/gems/1.9.1/gems/passenger-4.0.5/libout/apache2/mod_passenger.so
        PassengerRoot /usr/local/lib/ruby/gems/1.9.1/gems/passenger-4.0.5
        PassengerDefaultRuby /usr/local/bin/ruby

1. 新規ファイル /etc/httpd/sites-available/default に次の内容を書き込みます。

        <VirtualHost *:80>
        DocumentRoot /var/www/html
            <Directory /var/www/html>
                AllowOverride all
                Options None
                Order Deny,Allow
                Deny from All
            </Directory>
        </VirtualHost>

        $ ln -s /etc/httpd/sites-available/default /etc/httpd/sites-enabled/000-default

1. 新規ファイル /etc/httpd/sites-available/hcoss に次の内容を書き込みます。

        <VirtualHost *:80>
            ServerName hcoss.daito.ai-hide.net
            ServerAlias *.hcoss.daito.ai-hide.net
            DocumentRoot /var/rails/hcoss/current/public
            RackEnv production
            PassengerEnabled on
            RemoveHandler .cgi .php            
            <Directory /var/rails/hcoss/current/public>
                AllowOverride all
                Options -MultiViews
            </Directory>
        </VirtualHost>

        $ ln -s /etc/httpd/sites-available/hcoss /etc/httpd/sites-enabled/001-hcoss

1. Apacheの起動

        $ service httpd start

###### <a name="section2-2-2-7">staging環境のデータベースの準備
1. 日本語対応

        $ mysql -h development.cfxq9mnwsm8s.ap-northeast-1.rds.amazonaws.com -P 3306 -u devdaito -p development
        Enter password: devdaito1017
        mysql> show variables like '%character%';
        mysql> alter database development default character set utf8;
        mysql> show variables like '%character%';        

1. ステージングDB作成

        
        mysql> CREATE DATABASE hcoss_staging DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
        mysql> GRANT ALL ON hcoss_staging.* TO 'hcoss'@'localhost';
        mysql> SET PASSWORD FOR 'hcoss'@'localhost' = PASSWORD('55Hmh0;ks');
        mysql> alter database hcoss_staging default character set utf8;
        mysql> show variables like '%character%';
        exit
        
###### <a name="section2-2-2-8">Gemfileの追加
Gemfileを追加して、bundle installを実行。

      # Deploy with Capistrano
      group :deployment do
        gem 'capistrano'
        gem 'capistrano-ext'
        gem 'capistrano_colors'
        gem 'rvm-capistrano'
      end

      # メンテナンスモード画面の表示
      gem 'turnout'
        
###### <a name="section2-2-2-9">Capistranoの設定フィルを生成
    $ capify .

続いて、staging環境/production環境専用のCapistrano設定ファイルを作成。

    $ mkdir config/deploy
    $ touch config/deploy/staging.rb
    $ touch config/deploy/production.rb
    
###### <a name="section2-2-2-10">Capistrano共通のデプロイ設定
config/deploy.rb

    # -*- coding: utf-8 -*-
    set :default_stage, "production"
    
    # 複数環境にデプロイできるようにする
    require "capistrano/ext/multistage"
    
    # capistranoの出力をカラーに
    require 'capistrano_colors'
    
    # cap deploy時に自動で bundle installを実行
    require "bundler/capistrano"
    
    # RVM
    require "rvm/capistrano"
    #### RVMで利用するRubyのバージョンを設定(1.9.3を変更) ####
    set :rvm_ruby_string, '1.9.3'
    set :rvm_type, :user
    
    # gitリポジトリの設定
    #### gitリポジトリをセット ####
    set :local_repository,  "git@dev.k2-works.net:hcoss.git"
    set :repository,  "/var/git/hcoss.git"
    set :scm, :git
    set :branch, "master"
    set :deploy_via, :remote_cache
    
    # SSH
    set :use_sudo, true
    set :default_run_options, :pty => true
    ssh_options[:forward_agent] = true
    
    set :normalize_asset_timestamps, false
    # 過去のデプロイしたフォルダを履歴として保持する数
    set :keep_releases, 5
    
    # assets:precompile
    namespace :assets do
      task :precompile, :roles => :web do
        run "cd #{current_path} && RAILS_ENV=#{rails_env} bundle exec rake assets:precompile"
      end
    end
    
    # メンテナンスモード
    namespace :maintenance do
      desc "Maintenance start"
      task :on, :roles => :web do
        on_rollback { run "rm #{current_path}/tmp/maintenance.yml" }
        page = File.read("config/maintenance.yml")
        put page, "#{current_path}/tmp/maintenance.yml", :mode => 0644
      end
    
    desc "Maintenance stop"
    task :off, :roles => :web do
    run "rm #{release_path}/tmp/maintenance.yml"
      end
    end

    namespace :deploy do
      # Passengerの実行ユーザー/Groupをセット
      task :set_file_process_owner do
        sudo "chown -R #{user}:#{user_group} #{deploy_to}"
      end

      #### sitemap_generatorを使ってない場合は削除 ####
    #  desc "sitemapの更新"
    #  task :refresh_sitemaps do
    #    run "cd #{latest_release} && RAILS_ENV=#{rails_env} bundle exec rake sitemap:refresh"
    #  end

      # 本番サーバでPassenger以外を使っている場合は適宜変更して下さい。
      desc "Passenger用に起動/停止タスクを変更"
      task :restart, :roles => :web do
        run "touch #{current_path}/tmp/restart.txt"
      end

      # page_cacheを使用していない場合は不要
      desc "キャッシュhtmlの削除(deploy中に不完全なhtmlを生成しないための対策)"
      task :remove_caches, :roles => :web do
        run "rm -rf #{current_path}/public/index.html"
      end

      #### Wheneverを使っていない場合は削除
    #  desc "wheneverのアップデート"
    #  task :whenever_update do
    #    run "cd #{latest_release} && RAILS_ENV=#{rails_env} bundle exec whenever --update-crontab #{application} -f config/schedule_#{rails_env}.rb"
    #  end
    end
    before :deploy, "deploy:set_file_process_owner"



###### <a name="section2-2-2-11">Capistrano Staging環境のデプロイ設定
config/deploy/staging.rb

    # -*- coding: utf-8 -*-
    #### TEST_APP_STAGINGにアプリ名を登録 ####
    set :application, "HCOSS"

    # RVM
    #### rvmのパス 環境に合わせて変更 ####
    set :rvm_path, '~/.rvm'
    set :rvm_bin_path, "#{rvm_path}/bin"
    set :rvm_lib_path, "#{rvm_path}/lib"
    
    # デプロイ先のフォルダ設定
    #### デプロイ先のフォルダを設定 ####
    set :deploy_to, "/var/rails/hcoss"
    #### デプロイする環境名をセット ####
    set :rails_env, "staging"
    
    # デプロイ先のサーバの設定
    server "dev.k2-works.net", :app, :web, :db, :primary => true
    
    # Bundle
    set :bundle_flags, ""
    
    # SSHユーザの設定
    #### USER_NAME, USER_GROUP, PASSWORD, KEYのパス, パスフレーズ、SSHのポート
    set :user, "rails"
    set :user_group, "rails"
    set :password, "k2wRAL0813"
    ssh_options[:keys] = %w(~/.ssh/id_rsa)
    ssh_options[:passphrase] = ""
    ssh_options[:port] = "22"
    
    namespace :deploy do
      #### Powを使っていない場合は削除(環境に合わせて適宜変更)
    #  desc "Powの環境変数をセット"
    #  task :set_powenv_and_symlink do
    #    run "cd #{latest_release} && echo 'export RAILS_ENV=#{rails_env}' > .powenv"
    #    run "rm -rf /Users/#{user}/.pow/#{application} && ln -s #{latest_release} ~/.pow/#{application}"
    #  end
    end
    
    # deploy ==========================
    after :deploy, "deploy:migrate"
    #after :deploy, "deploy:set_powenv_and_symlink"
    #after :deploy, "deploy:whenever_update"
    after :deploy, "deploy:cleanup" # 古い履歴のフォルダを削除

###### <a name="section2-2-2-12">メンテナンス画面の設定
config/maintenace.yml

    ---
    reason: Someone told me I should type <code>sudo rm -rf /</code>
    allowed_paths:
    - ^/help
    - ^/contact_us
    allowed_ips:
    - 127.0.0.1
    - 192.168.0.0/24
    
###### <a name="section2-2-2-13">DB設定
database.yml

    # SQLite version 3.x
    #   gem install sqlite3
    #
    #   Ensure the SQLite 3 gem is defined in your Gemfile
    #   gem 'sqlite3'
    development:
      adapter: sqlite3
      database: db/development.sqlite3
      pool: 5
      timeout: 5000
    
    # Warning: The database defined as "test" will be erased and
    # re-generated from your development database when you run "rake".
    # Do not set this db to the same as development or production.
    test: &test
      adapter: sqlite3
      database: db/test.sqlite3
      pool: 5
      timeout: 5000
    
    staging:
      adapter: mysql2
      database: hcoss_staging
      username: dev
      password: 55Hmh0;ks
      host: development.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com
      encoding: utf8
    
    production:
      adapter: mysql2
      database: hcoss_production
      username: dev
      password: 55Hmh0;ks
      host: development.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com
      encoding: utf8
      
      
    cucumber:
      <<: *test

###### <a name="section2-2-2-14">デプロイ前のチェックリスト

* deploy.rb, staging.rb, production.rbのパラメータをすべて設定したかチェック

* ステージングDB、本番DBの設定をdatabase.ymlに追加しているか？

* デプロイ用Gitリポジトリのブランチが最新の状態か？

###### <a name="section2-2-2-15">デプロイ手順

    $ cap staging deploy:setup
    $ cap staging deploy
    
# 参照
## インフラ
[Amazon Relational Database Service](http://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.RDSVPC.html)
[Amazon RDS編～DBインスタンスを立ちあげてみよう！](http://recipe.kc-cloud.jp/archives/39)
[Amazon RDS編～EC2インスタンスからDBインスタンスへの接続～](http://recipe.kc-cloud.jp/archives/397)
## ソフトウェア
[RVM](https://rvm.io/)
[RSpec/Spork/Guard/Growl/Rails 3.2.11で作る - プリチーなTDD環境！](http://morizyun.github.io/blog/guard-spork-rspec-tdd/)
[sporkでrspecを高速化](http://blog.digital-squad.net/article/199522761.html)
[入門Jenkins](http://www.shuwasystem.co.jp/products/7980html/3530.html)
[The RSpec Book](http://books.shoeisha.co.jp/book/b94964.html)
[Amazon RDS 文字化けと格闘](http://www.teps4545.com/2010/01/amazon-rds.html)
[Capistrano 複数環境へのデプロイ](http://morizyun.github.io/blog/capistrano-localhost-multi-deploy/)
[Amazon Linux AMI でRubyを1.9系にする](http://mytechmemo.info/archives/475)
[Amazon-LinuxにRVMを利用してApache+Passenger+Railsのインストール](http://d.hatena.ne.jp/dkfj/20120716/1342394784)
