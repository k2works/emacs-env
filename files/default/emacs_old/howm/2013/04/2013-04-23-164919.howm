[2013-04-23 16:49] 
= CI環境構築メモ
* Ruby on Railsの環境作成
** Railsプロジェクトの作成
   + node.jsインストール
     [[http://takatamajp.wordpress.com/2012/11/17/install_nodejs_on_mac_os_x_using_homebrew/][Mac OS X と homebrew なら驚くほど簡単に node.js で HelloWorld]]
     $ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
     $brew install node
   + Railsのインストール
     $rails new blog
   + RSpecのインストール
     [[http://qiita.com/items/bf1bc376d88186050f3f][これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル]]
     Gemfile
     group :test, :development do
       gem 'rspec-rails', '~>2.0'
     end
     $bundle install
     $rails generate rspec:install
     $rails generate scaffold Post name:string title:string content:text
     $rake db:create
     $rake db:migrate
     $rake spec
** Capybara-webkitのインストール
   + QTライブラリのインストール
     [[http://www.oiax.jp/rails/zakkan/testing_javascript_with_rspec_and_capybara.html][RSpecとCapybaraでJavaScript/Ajaxをテストする]]     
     $brew install qt
   + Capybara-webkitのインストール
     Mac環境ではheadlessはいらない

     group :test, :development do
       gem 'rspec-rails','~>2.0'
       gem 'databae_cleaner'
     end 

     group :test do
       gem 'headless'
     end 

     $bundle install

     group :test do
       gem 'headless'
       gem 'capybara-webkit'
     end 

     $bundle install

     spec/spec_helper.rb    
     config.before(:suite) do↵
       DatabaseCleaner.strategy = :truncation↵
       DatabaseCleaner.clean_with(:truncation)↵
     end↵↵
     config.before(:each) do↵
      DatabaseCleaner.start↵
     end↵

     config.after(:each) do↵
      DatabaseCleaner.clean↵     
     end↵

     Capybara.javascript_driver = :webkit↵
** RSpecの実行&Git登録
   + RSpecの動作確認
     $ rake spec
   + Gitレポジトリの作成
     まずリモートマシンにgitユーザーを作成します。
     $ sudo useradd -m -d /var/git git
     $ sudo passwd git
     $ sudo chmod 750 /var/git
     $ sudo gpasswd -a rails git
     % scp .ssh/id_rsa.pub git@local.railsdemo.k2works.net:~
     SSH公開鍵をauthorized_keysに加えます。
     $ mkdir -m 700 .ssh
     $ cat id_rsa.pub >> .ssh/authorized_keys
     $ chmod 600 .ssh/authorized_keys
     $ rm id_rsa.pub
     空のレポジトリ blog.git を作成します。
     $ mkdir blog.git
     $ git init --bare --shared=0640 blog.git
   + レポジトリにソースコードを登録
     ローカルマシンのディレクトリに移動して、以下のコマンドを順に実行します。
     $ git init
     $ git add .
     $ git commit -m 'prepare Rails project for Jenkins'   
     $ git remote add origin git@local.k2-works.net:blog.git
     $ git push origin master
** テストサーバー
+ Sport
  [[http://qiita.com/items/fbe0a4ac2269a743dc17][これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル（その２）]]
  $ vim Gemfile
  Gemfile
  group :development, :test do
    gem 'rspec-rails', '2.10.1'
    gem 'spork', '0.9.2'
  end
  spork --bootstrap
  $ vim spec/spec_helper.rb
  一通りSpork.prefork do・・・endに入れる
  $ vim .rspec
  .rspec
    --colour
    --drb
  $ spork  
** テスト自動化実行
+ watchr
+ Guard
*** fixture replacement
+ factory_girl
   [[http://qiita.com/items/fbe0a4ac2269a743dc17][これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル（その２）]]
   $ vim Gemfile
   Gemfile
   group :development, :test do
     gem 'rspec-rails', '~>2.0'
     gem 'spork'
     gem 'factory_girl_rails'
     gem 'database_cleaner'
  end
  bundle
** テスト自動実行化
*** RailsをビルドするためのJenkinsセットアップ
+ RVMの設定
  [[http://blog.opensquare.jp/?p=1667][Ubuntu Server 12.04 LTS + RVM + ruby1.9 + Rails3の環境を構築してみた]]
  
** fixture replacement
* Ruby on Railsアプリケーションをビルドする（自動テスト）
** jenkinsのインストール
   [[http://madroom-project.blogspot.jp/2012/12/ubuntu-1204jenkinsapache80.html][Ubuntu 12.04にJenkinsをインストールしてApacheでポート80で動かす]]

   Jenkins Update
   http://d.hatena.ne.jp/tadasy/20111109/1320842690
   wget http://mirrors.jenkins-ci.org/war/latest/jenkins.war

   sudo service jenkins stop
   sudo rm /usr/share/jenkins/jenkins.war
   sudo mv jenkins.war /usr/share/jenkins/
   sudo service jenkins start

** RailsをビルドするためのJenkinsセットアップ
   + Git Plugin
   + RVM Plugin
   + Rake Plugin
** Railsをビルドするジョブを作成する
   + Rake Pluginを使ってビルドする
   + シェルスクリプトを使ってビルドする
* Ruby on Railsアプリケーションをビルドする（コードインスペクション）
** コードカバレッジ分析
   + Gemをインストールする
     gem 'simplecov', :require => false
     gem 'simplecov-recov', :require => false
   + .gitignoreにcoverage追加
   + Ruby metrics plugin
     ビルド後の処理の追加
** コード品質の検査
   + rails_best_practicesをGemに追加
     gem 'rails_bes_practices', :require => false
   + rails_bes_practices.sh追加
   + ビルド手順の追加からシェルの実行を追加
     bash script/rails_best_paractices.sh
   + Plot Plugin
     ビルド後の処理でビルドデータをプロットを追加
   + .gitignoreにreportsを追加
** 重複コード（コピー＆ペースト）の検出
   + pmdインストール     
   + sudo apt-get install ant
   + tools/build.xml追加
   + DRY Plugin
     ビルド手順の追加からAntの呼び出しを追加
     ビルド後の処理に重複コード分析の集計を追加
** 他のコードインスペクション
* Ruby on Railsアプリケーションをビルドする（ドキュメント生成＆デプロイ）
** Ruby,Railsでのドキュメント生成
   + YARDを使ってドキュメントを生成し、閲覧できるようにする
     gem 'yard', :require => false
   + HTML Publisher Plugin
     ビルド手順の追加からシェルの実行を選択して yard doc
     ビルド後の処理の追加からPublish HTML Reports追加
** Ruby,Railsでのデプロイ
   + 新しいジョブを作るblog_deploy
   + ソースコード管理システムはblogジョブと同様に設定する
   + ビルド・トリガセクション内で他のプロジェクトのビルド後にビルドにチェックを入れる
   + Run the build in a RVM-managed environmentもblogジョブと同様に設定しておく
   + ビルドのセクションではシェルスクリプトの実行を選びcap deployを入力する
* Ruby on Railsアプリケーションをビルドする（分散ビルド）
  + 自動テストとコードインスペクションの分割
  + 自動テストの種類での分割
  + ビルドフローの起点の設定とフローに潜む問題の解決
    Jenkins Parameterized Trigger plugin
    Join plugin
    Build Pipeline Plugin
