= [2013-05-09]Gitの学習
[2013-05-09 09:12] 
* Gitとは
* Gitの基本概念
** プロジェクトの状態の記録
** プロジェクトの歴史の記録
** コミット家系図
** ブランチ
** ワークツリーとリポジトリ
** タグ
** インデックスとワークツリー
** タグ
** コミット家系図とマージ
** リポジトリの構造
* インストールと初期構成
* 一人で使う
** リポジトリの初期化
** 最初のコミット
** 変更を記録する
+ 最初の変更
+ git diffで変更を確認する
+ git addで状態記録することをリクエストする
+ git diff HEADで変更のすべてを再確認する
+ git diff HEADとgit diff
+ git add -uを使う
+ git commitでエディタを使う
+ git statusコマンドと.gitignore
+ git commit -aコマンドを使う
** インデックスを理解する
** 変更履歴を見る
+ git logを使う
+ git logのオプションを使う
+ gitkを使う
** 部分変更を記録する
+ git add -pを使う
+ git diff --cachedを使う
+ git commit -vを使う
+ git add -Aを使う
+ git commit<paths>を使う
+ git showを使う
+ git reset<path>を使う
** 履歴の検索
+ git logで探す
  git log --pretty=short
+ git log<paths>で探す
  git log --pretty=short index.html
+ git log --grep=<pattern>で探す
  git log --pretty=short --grep='特別参加'
  git log --pretty=short --all-match --grep='バック' --grep='グラウンド'
+ git blameで探す
** 変更を取り消す
+ git revertを使って過去のコミット効果を打ち消す
+ git checkout<paths>を使ってワークツリーにした変更を取り消す
  git checkout index.html
  git checkout HEAD index.html
** 歴史を書き換える
+ git reset HEAD^でコミットを捨てる
+ git reset --hard HEAD^でコミットも変更点も捨てる
+ コミットをやり直す
+ git rebase -iで書き換える
* ２カ所で使う
** バックアップリポジトリを作る
+ git --bare init
** ２カ所目を準備
** 並行開発した変更のマージ
+ git pull
** タグをつけてリリースを管理する
** コミットを名前で呼ぶ
** git describeコマンド
** git describe --containsコマンド
* グループで使う
+ 共用リポジトリの準備
umask 002
mkdir -p /pub/repositories/gitusers.git
cd /pub/repositories/gitusers.git
chgrp gitusers .
git --bare init --shared
+ 共用リポジトリからのclone
+ より高度なグループ開発
* ブランチを使った開発
* 分散環境とブランチの関連
* 変更履歴を追いかける
* バッチベースのワークフロー
* ゴミファイルの無視
* 構成変数
* リモートリポジトリ定義
** リモートリポジトリ
** リモート追跡ブランチ
** ２つめのブランチを作る
** ２つめのリモートを定義する
** リモート定義の確認
** １つだけのリモートブランチを追跡する
** リモート定義とトピックブランチ
** メンテナーのワークフロー
** プッシュ用のRULの定義
** リモートリポジトリへのプッシュ定義
** 歴史探訪
** ファーストフォワード
* ファイルアトリビュート
* 歴史の２分検索
* 間違いからの回復
* リポジトリの出版公開
* gitの周辺

