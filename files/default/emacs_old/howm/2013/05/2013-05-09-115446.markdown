= 開発/本番環境構築手順書
==============

## 1) 目的
   継続的インテグレーション環境を構築して高品質で短期的にシステムを開発する環境を構築する  

## 2) 前提条件

## 3) インフラ環境の構築

### 3.1) ハードウェア

#### 3.1.1) AWS環境の構築

  * EC2インスタンス作成
  * EBSの作成

        $ yum install xfsprogs.x86_64
        $ mkfs.xfs /dev/xvdj
        $ mount -t xfs -o defaults /dev/xvdj /var/git

  * Elastic IPの割当
  * Route53でホスト名の割当
  * RDSインスタンスの作成
  * RDSセットアップ

          $ rds-create-db-security-group development
        --db-security-group-description 'this RDS is development environments'
          $ rds-authorize-db-security-group-ingress development --cidr-ip
        0.0.0.0/0
          $ rds-authorize-db-security-group-ingress development
        --ec2-security-group-name web --ec2-security-group-owner-id 262470114399
          $ rds-create-db-instance development --engine MySQL
        --engine-version 5.5.27 --db-instance-class db.t1.micro --allocated-storage
        5 --master-username dev --master-user-password dev123 --db-security-groups
        production --backup-retention-period 3
          $ rds-create-db-parameter-group development -f mysql5.5 -d "DB
        Parameter Group for utf8"
          $ rds-modify-db-parameter-group development -p
        "name=character_set_client, value=utf8, method=immediate"
          $ rds-modify-db-parameter-group development -p
        "name=character_set_connection, value=utf8, method=immediate"
          $ rds-modify-db-parameter-group development -p
        "name=character_set_database, value=utf8, method=immediate"
          $ rds-modify-db-parameter-group development -p
        "name=character_set_results, value=utf8, method=immediate"
          $ rds-modify-db-parameter-group development -p
        "name=character_set_server, value=utf8, method=immediate"
          RDSインスタンスのDB Parameter Groupをdevelopmentに更新

### 3.2) ソフトウェア(Cent OS 6.3編)

#### 3.2.1) OSの設定

  * 一般ユーザーの作成

        $ useradd -m cent
        $ passwd cent
        $ /usr/sbin/visudo
         # %wheel ALL=(ALL) ALL
         #をとる
        $ gpasswd -a cent wheel

  * sshログイン設定
  * 起動スクリプトの追加
  * .ec2ディレクトリの作成
  * 認証ファイルのコピー
  * ec2-api-toolsのコピー
  * perlのインストール

          yum install perl

  * jdkのインストール

          yum list \*java-1\* | grep open
          yum install java-1.7.0-openjdk.x86_64

  * 起動時に実行するようにする

          /etc/init.d/ec2
          $ chkconfig --add ec2
          $ chkconfig ec2 on
      起動スクリプトを実行してEBSバックアップをとるとログインできなくなる

#### 3.2.2) ミドルウェアの設定

##### 3.2.2.1) RDMSの構築

  * MySQLサーバのセットアップ

          $ sudo yum install expect
          $ mkpasswd
          パスワード
          mzH6bS1x- (hcoss_product)
          55Hmh0;ks (hcoss_development)
          % sudo -s
          % echo "mzH6bS1x-" > /root/mysql_hcoss_product_password
          % echo "55Hmh0;ks" > /root/mysql_hcoss_development_password
          % chmod 400 /root/mysql_*_password
          % exit

  * 接続の確認

          mysql -h development.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com
        -P 3306 -u dev -p
          Enter password:dev123
          パスワードの変更はAWSコンソールから実行する
          mysql -h development.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com
        -P 3306 -u dev -p
          Enter password:55Hmh0;ks

##### 3.2.2.2) プロジェクト管理ツールの構築

  * Aluminiumが保存されるディレクトリをマウントする

           var/opt/alminium  
  アクセスができなくなるのでやめる       

  * Aluminumインストール

          $ yum install git 
          $ git clone [https://github.com/alminium/alminium.git]
          $ cd alminium
          $ bash ./smelt

  * インストール後にapacheが起動しない場合

          $ sudo service httpd start
          Starting httpd: httpd: Syntax error on line 221 of
        /etc/httpd/conf/httpd.conf: Syntax error on line 1 of
        /etc/httpd/conf.d/redmine.conf: Cannot load
        /usr/lib64/ruby/gems/1.9.1/gems/passenger-4
        0.2/ext/apache2/mod_passenger.so into server:
        /usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0
        2/ext/apache2/mod_passenger.so: cannot open shared object file: No such
        file or directory
                                                             [FAILED]
          $ sudo find / -type f -name mod_passenger.so
          $ sudo cp usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/libout/apache2/mod_passenger.so /usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/ext/apache2                $ sudo cp usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/libout/apache2/mod_passenger.so /usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/ext/apache2

  * プロジェクトの登録

          $ git config --global http.sslverify false
          $ git clone [https://dev.k2-works.net/git/hcoss]
           ここで聞かれるパスワードはalminumで登録した情報（サーバOSのユーザではない）

##### 3.2.2.3) SCMの構築

  * Gitユーザーの作成         

         まずリモートマシンにgitユーザーを作成します。
         $ sudo useradd -m -d /var/git git
         $ sudo passwd git
         $ sudo chmod 750 /var/git
         $ sudo gpasswd -a git apache      

  * Gitレポジトリの設定       

         ローカルマシンからあなたのSSH公開鍵をgitユーザーのホームディレクトリに転送します。
         $ scp -i k2works.pem /.ssh/id_rsa.pub git@dev.k2-works.net:
         SSH公開鍵をauthorized_keysに加えます。
         $ cat id_rsa.pub >> .ssh/authorized_keys
         $ rm id_rsa.pub
         $ sudo mkdir --mode=700 var/git.ssh
         $ sudo cp .ssh/authorized_keys var/git.ssh/
         $ sudo chown -R git:git var/git.ssh
         ローカルマシンからrailsユーザーとしてSSHで接続し、パスワードを尋ねられないことを確認します。
         % ssh git@dev.k2-works.net
         リポジトリへのシンボルリンクを作成する
         $ ln -s var/opt/alminium/git/hcoss hcoss.git

##### 3.2.2.4) CIサーバの構築

###### 3.2.2.4.1) 自動テスト

###### 3.2.2.4.1.1) Railsプロジェクトの作成

  * node.jsインストール
  [Mac OS X と homebrew なら驚くほど簡単に node.js で HelloWorld]

        $ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
        $brew install node

  * Railsのインストール     
  * RSpecのインストール
  [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル]
  
   Gemfile
       
        group :test, :development do
         gem 'rspec-rails', '~>2.0'
        end

        $bundle install
        $rails generate rspec:install
        $rake db:create
        $rake db:migrate
        $rake spec

   .rspecを直下に作成する

  * -color
  * Cucumberのインストール

    Gemfile
       
        group :test, :development do
         gem 'rspec-rails', '~>2.0'
         gem 'cucumber-rails"
        end     

        $bundle install
        $rails generate cucumber:install
        $rake db:migrate
        $rake db:test:prepare
        $rake spec
        $rake cucumber

    [Mac OS X と homebrew なら驚くほど簡単に node.js で HelloWorld]: http://takatamajp.wordpress.com/2012/11/17/install_nodejs_on_mac_os_x_using_homebrew/
    [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル]: http://qiita.com/items/bf1bc376d88186050f3f


###### 3.2.2.4.1.1.1) Capybara-webkitのインストール

  * QTライブラリのインストール

      [RSpecとCapybaraでJavaScript/Ajaxをテストする] 

        $brew install qt

  * Capybara-webkitのインストール

       Mac環境ではheadlessはいらない
       サーバーにはインストールすること

  * CentOS6.3の場合

         [Installing Qt and compiling capybara webkit]
         [CentOS6.3 の Jenkins 上で jasmine-headless-webkit を走らせる]
         rpm -i [http://dl.atrpms.net/el6-x86\_64/atrpms/stable/atrpms-repo-6-6.el6.x86\_64.rpm]              rpm -i [http://dl.atrpms.net/el6-x86\_64/atrpms/stable/atrpms-repo-6-6.el6.x86\_64.rpm]
         yum install --enablerepo=atrpms-testing qt47-webkit-devel
         export QMAKE=/usr/bin/qmake-qt47
         cd /usr/bin
         sudo ln -s qmake-qt47 qmake
         sudo ln -s qmake-qt47 qmake-qt4

         group :test, :development do
          gem 'rspec-rails','~>2.0'
          gem 'database_cleaner'
         end 
        group :test do
          gem 'headless'
          gem 'capybara-webkit'
        end 
        $bundle install

     spec/spec_helper.rb

        config.before(:suite) do
         DatabaseCleaner.strategy = :truncation
         DatabaseCleaner.clean_with(:truncation)
        end
        
        config.before(:each) do
         DatabaseCleaner.start
        end
        config.after(:each) do
         DatabaseCleaner.clean
        end
        Capybara.javascript_driver = :webkit
        $ rake spec

     [RSpecとCapybaraでJavaScript/Ajaxをテストする]: http://www.oiax.jp/rails/zakkan/testing_javascript_with_rspec_and_capybara.html
     [Installing Qt and compiling capybara webkit]: https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit
     [CentOS6.3 の Jenkins 上で jasmine-headless-webkit を走らせる]: http://tomykaira.hatenablog.com/entry/2012/07/27/103122
     [http://dl.atrpms.net/el6-x86\_64/atrpms/stable/atrpms-repo-6-6.el6.x86\_64.rpm]: http://dl.atrpms.net/el6-x86_64/atrpms/stable/atrpms-repo-6-6.el6.x86_64.rpm


###### 3.2.2.4.1.1.2) テストサーバー

  * Sport

    [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル（その２）]

        $ vim Gemfile

    Gemfile
    
        group :test, :development do
         gem 'rspec-rails','~>2.0'
         gem 'database_cleaner'
         gem 'spork','0.9.2'
        end

        spork --bootstrap
        $ vim spec/spec_helper.rb

    一通りSpork.prefork do・・・endに入れる

        require 'rubygems'
        require 'spork'
        #uncomment the following line to use spork with the debugger
        #require 'spork/ext/ruby-debug'
        Spork.prefork do
        # Loading more in this block will cause your tests to run faster.
        However,
          # if you change any configuration or code from libraries loaded here,
        you'll
          # need to restart spork for it take effect.
          # This file is copied to spec/ when you run 'rails generate
        rspec:install'
          ENV["RAILS_ENV"] ||= 'test'
          require File.expand_path("../../config/environment", FILE
          require 'rspec/rails'
          require 'rspec/autorun'
          # Requires supporting ruby files with custom matchers and macros, etc,
          # in spec/support/ and its subdirectories.
          Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}
          RSpec.configure do |config|
          # ## Mock Framework
          #
          # If you prefer to use mocha, flexmock or RR, uncomment the appropriate
        line:
          #
          # config.mock_with :mocha
          # config.mock_with :flexmock
          # config.mock_with :rr
          # Remove this line if you're not using ActiveRecord or ActiveRecord
        fixtures
          config.fixture_path = "#{::Rails.root}/spec/fixtures"
          # If you're not using ActiveRecord, or you'd prefer not to run each of
        your
          # examples within a transaction, remove the following line or assign
        false
          # instead of true.
          config.use_transactional_fixtures = true
          # If true, the base class of anonymous controllers will be inferred
          # automatically. This will be the default behavior in future versions of
          # rspec-rails.
          config.infer_base_class_for_anonymous_controllers = false
          end
          end
          Spork.each_run do
          # This code will be run each time you run your specs.
          end
          $ vim .rspec
          .rspec

  * -colour
  * -drb

         $ spork       

    [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル（その２）]: http://qiita.com/items/fbe0a4ac2269a743dc17


###### 3.2.2.4.1.1.3) jenkinsのインストール
      Jenkins Update
      [http://d.hatena.ne.jp/tadasy/20111109/1320842690]
      [http://shogogg.hatenablog.jp/entry/20120410/1334048401]
      wget [http://mirrors.jenkins-ci.org/war/latest/jenkins.war]
      sudo service jenkins stop
      sudo rm usr/lib/jenkins/jenkins.war     sudo mv jenkins.war
    /usr/lib/jenkins
      sudo service jenkins start

###### 3.2.2.4.1.1.4) RailsをビルドするためのJenkinsセットアップ

  * RVMの設定

    [Ubuntu Server 12.04 LTS + RVM + ruby1.9 + Rails3の環境を構築してみた]

  * RVMのインストール

    [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]

        bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )        bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )
        rvm pkg install libyaml
        rvm remove 1.9.1    
        rvm install ruby-1.9.3 -C --with-opt-dir=$HOME/.rvm/usr    

  * Git Plugin
  * RVM Plugin
  * Rake Plugin
  * Jenkins及びプラグインの設定
  * gitの設定
  * Git pluginの設定
  * Rakeの設定（空欄のまま）
  * E-mail通知の設定

  [Ubuntu Server 12.04 LTS + RVM + ruby1.9 + Rails3の環境を構築してみた]: http://blog.opensquare.jp/?p=1667
  [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]: http://morizyun.github.io/blog/rvm-install-centos-ruby-rails/



###### 3.2.2.4.1.1.5) Railsをビルドするジョブを作成する

  * jenkinsからgitにアクセスできるようにする

        この辺は曖昧
        $ qpasswd -a jenkins apcach
        $ qpasswd -a jenkins git
        では、jenkinsユーザでsshキーの作成を行います

   [ Jenkins@さくらVPSにOctopressのデプロイを任せてみる]
       
        $ cd /var/lib/jenkins
        $ sudo -u jenkins -H /usr/bin/git config --global user.email "kakimomokuri@gmail.com"
        $ sudo -u jenkins -H /usr/bin/git config --global user.name "k2works"
        $ sudo -u jenkins -H ssh-keygen -t rsa -C kakimomokuri@gmail.com
        cat var/lib/jenkins.ssh/id_rsa.pub >> var/git.ssh/authorized_key
        cp .ssh/known_hosts var/lib/jenkins.ssh/

  * Rake Pluginを使ってビルドする
  * シェルスクリプトを使ってビルドする

        gem install bundle --no-ri --no-rdoc
        bundle install
        rake db:setup
        rake spec

    [ Jenkins@さくらVPSにOctopressのデプロイを任せてみる]: http://www.tokoro.me/2012/07/29/jenkins-octopress/    


###### 3.2.2.4.2) コードインスペクション

###### 3.2.2.4.2.1) コードカバレッジ分析

  * Gemをインストールする

        group :test do
         #ローカル開発では使わない
         # gem 'headless'
         gem 'capybara-webkit'
         gem 'simplecov', :require => false
         gem 'simplecov-rcov', :require => false
        end

  * spec/spec_helpler.rbの頭に追加

        require 'simplecov'
        require 'simplecov-rcov'
        SimpleCov.formatter = SimpleCov::Formatter::RcovFormatter
        SimpleCov.start 'rails'

  * .gitignoreにcoverage追加
  * Ruby metrics plugin

       ビルド後の処理の追加   

###### 3.2.2.4.2.2) コード品質の検査

  * rails_best_practicesをGemに追加

         group :test, :development do
          gem 'rspec-rails','~>2.0'
          gem 'database_cleaner'
          gem 'spork','0.9.2'
          gem 'rails_best_practices', :require => false
        end     

  * rails_bes_practices.sh追加
  * ビルド手順の追加からシェルの実行を追加

       bash script/rails_best_paractices.sh

  * Plot Plugin

       ビルド後の処理でビルドデータをプロットを追加

  * .gitignoreにreportsを追加


###### 3.2.2.4.2.3) 重複コード（コピー＆ペースト）の検出

   [CentOSにAntをインストールする]

  * pmdインストール     
  * sudo apt-get install ant
  * tools/build.xml追加
  * DRY Plugin

       ビルド手順の追加からAntの呼び出しを追加
       ビルド後の処理に重複コード分析の集計を追加

  * .gitignoreへの追加

       tools/pmd/doc

       [CentOSにAntをインストールする]: http://blog.justoneplanet.info/2010/12/03/centos%E3%81%ABant%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/


###### 3.2.2.4.3) ドキュメント生成

###### 3.2.2.4.3.1) Ruby,Railsでのドキュメント生成

  * YARDを使ってドキュメントを生成し、閲覧できるようにする

        group :test, :development do
         gem 'rspec-rails','~>2.0'
         gem 'database_cleaner'
         gem 'spork','0.9.2'
         gem 'rails_best_practices', :require => false
         gem 'yard', :require => false
        end        

  * HTML Publisher Plugin

       ビルド手順の追加からシェルの実行を選択して yard doc
       ビルド後の処理の追加からPublish HTML Reports追加

###### 3.2.2.4.3.2) Ruby,Railsでのデプロイ

  * 新しいジョブを作るblog_deploy
  * ソースコード管理システムはblogジョブと同様に設定する
  * ビルド・トリガセクション内で他のプロジェクトのビルド後にビルドにチェックを入れる
  * Run the build in a RVM-managed environmentもblogジョブと同様に設定しておく
  * ビルドのセクションではシェルスクリプトの実行を選びcap deployを入力する** デプロイ


###### 3.2.2.4.4) 分散ビルド

  * 自動テストとコードインスペクションの分割
  * 自動テストの種類での分割
  * ビルドフローの起点の設定とフローに潜む問題の解決

      Jenkins Parameterized Trigger plugin
      Join plugin
      Build Pipeline Plugin

#### 3.2.3) アプリケーションの設定

##### 3.2.3.1) ステージング環境の構築

  * Railsアプリケーションのセットアップ    
  * railsユーザーの作成

        $ sudo useradd -m -d /var/rails rails
        $ sudo passwd rails
        $ sudo chmod 750 /var/rails
        railsユーザーをgitグループに加えます。/var/opt/aluminum/gitディレクトリの読み取り権限が与えられることになります。            railsユーザーをgitグループに加えます。/var/opt/aluminum/gitディレクトリの読み取り権限が与えられることになります。
        読み取り権限変更を忘れるとwebからアクセスできないので注意！
        $ sudo gpasswd -a rails git
        $ sudo gpasswd -a rails apache

  * Apache実行ユーザーをグループに追加

        % sudo gpasswd -a apache rails

  * RVMのインストール

        $ yuml install libtool
        $ yuml install bison
        [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]
        bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )            bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )
        rvm pkg install libyaml
        rvm install ruby-1.9.3 -C --with-opt-dir=$HOME/.rvm/usr
        railsユーザーがrvmを使っていない場合は
        .bashrc
        source "$HOME/.rvm/scripts/rvm"
        追加
       [今更ながらubuntu11.10にrvmを入れたので忘れないようにメモ]

  * 各種パッケージのインストール

        $ yum update
        $ yum -y install gcc gcc-c++ autoconf git
        $ yum -y install openssl-devel zlib-devel readline-devel curl-devel gettext-devel
        $ yum -y install httpd-devel sqlite-devel

  * libyamlのインストール

        $ cd /usr/local/src
        $ wget [http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz]
        $ tar xzf yaml-0.1.4.tar.gz
        $ cd yaml-0.1.4
        $ ./configure
        $ make && make install

  * SELinuxの無効化

      aluminumがやってる
      
        $ setenforce 0
        
      エディタで /etc/sysconfig/selinux を開き、     
      SELINUX=enforcing
      を
      SELINUX=disabled
      に変更してください。

  * staging環境のデータベースの準備

         mysql> CREATE DATABASE hcoss_staging DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
         mysql> GRANT ALL ON hcoss_staging.* TO 'hcoss'@'localhost';
         mysql> SET PASSWORD FOR 'hcoss'@'localhost' = PASSWORD('55Hmh0;ks');
         mysql> alter database hcoss_staging default character set utf8;
         mysql> show variables like '%character%';
         exit

  * Gemfileの追加

        Gemfileを追加して、bundle installを実行。
        group :deployment do
        # Capistraono (Deploy支援)
          gem 'capistrano'
          gem 'capistrano-ext'
          gem 'capistrano_colors'
          gem 'rvm-capistrano'
        end
        # メンテナンスモード画面の表示
        gem 'turnout'

  * Capistranoの設定フィルを生成

        $ capify .
        続いて、staging環境/production環境専用のCapistrano設定ファイルを作成。
        mkdir config/deploy
        touch config/deploy/staging.rb
        touch config/deploy/production.rb

  * Capistrano共通のデプロイ設定

        config/deploy.rb

  * Capistrano Staging環境のデプロイ設定

        config/deploy/staging.rb

  * Capistrano Producion環境のデプロイ設定

        config/deploy/production.rb

  * メンテナンス画面の設定

        config/maintenace.yml

  * DB設定

        database.yml

  * デプロイ前のチェックリスト
  * deploy.rb, staging.rb, production.rbのパラメータをすべて設定したかチェック
  * ステージングDB、本番DBの設定をdatabase.ymlに追加しているか？
  * デプロイ用Gitリポジトリのブランチが最新の状態か？
  * デプロイ手順

        cap staging deploy:setup
        cap staging deploy
        cap production deploy:setup
        cap production deploy      
        is not in the sudoers fileと出たときは
        visudoで
        rails   ALL=(ALL)    ALLを追加

  * Apachバーチャルホストを設定

        ステージング環境ではRailsEnvに注意すること
        sudo vi /etc/httpd/conf/httpd.conf
        #ServerName centossrv.com:80行頭に#を追加してコメントアウト
        NameVirtualHost *:80コメント解除(バーチャルホスト有効化)
        sudo vi /etc/httpd/conf.d/vhost.conf
        <VirtualHost *:80>
          <Location />
            <IfModule mod_deflate.c>
                SetOutputFilter DEFLATE
                SetEnvIfNoCase Request_URI \
                    \.(?:gif|jpe?g|png)$ no-gzip dont-vary
                Header append Vary User-Agent env=!dont-vary
            </IfModule>
          </Location>
          ServerName hcoss.dev.k2-works.net
          ServerAlias *.dev.k2-works.net
          DocumentRoot var/rails/hcoss/current/public
          RailsEnv staging
          PassengerEnabled on
          RemoveHandler .cgi .php
        </VirtualHost>

        $ apachectl cofigtest

      [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]: http://morizyun.github.io/blog/rvm-install-centos-ruby-rails/
      [今更ながらubuntu11.10にrvmを入れたので忘れないようにメモ]: http://d.hatena.ne.jp/zizgig/20120512/1336826698


##### 3.2.3.2) 本番環境の構築

## 4) SCMの構築

  * gitインストール


## 5) プロジェクト管理ツールの構築
    [高校生になって初めてスクラムを始めました～「ストーリー」で何を作るかまとめよう]

  * Aluminumインストール

        $ yum install git 
        $ git clone [https://github.com/alminium/alminium.git]
        $ cd alminium
        $ bash ./smelt

  * インストール後にapacheが起動しない場合

        $ sudo service httpd start
        Starting httpd: httpd: Syntax error on line 221 of
        /etc/httpd/conf/httpd.conf: Syntax error on line 1 of
        /etc/httpd/conf.d/redmine.conf: Cannot load
        /usr/lib64/ruby/gems/1.9.1/gems/passenger-4
        0.2/ext/apache2/mod_passenger.so into server:
        /usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0
        2/ext/apache2/mod_passenger.so: cannot open shared object file: No such
        file or directory
                                                             [FAILED]
        $ sudo find / -type f -name mod_passenger.so
         $ sudo cp usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/libout/apache2/mod_passenger.so /usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/ext/apache2        $ sudo cp usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/libout/apache2/mod_passenger.so /usr/lib64/ruby/gems/1.9.1/gems/passenger-4.0.2/ext/apache2

      [高校生になって初めてスクラムを始めました～「ストーリー」で何を作るかまとめよう]: http://www.atmarkit.co.jp/fjava/rensai4/scrum01/01.html


## 6) アプリケーションの構築

### 6.1) サーバ設定

  * EC2インスタンスセットアップ

      [CentOS用 Nginx起動スクリプト]
      起動スクリプトの追加（EIP割当）

      [CentOS用 Nginx起動スクリプト]: http://pirosikick.hateblo.jp/entry/20101019/1287502384


### 6.2) DB設定

  * RDSセットアップ

        $ rds-create-db-security-group development --db-security-group-description 'this RDS is development environments'
        $ rds-authorize-db-security-group-ingress development --cidr-ip 0.0.0.0/0
        $ rds-authorize-db-security-group-ingress development --ec2-security-group-name web --ec2-security-group-owner-id 262470114399
        $ rds-create-db-instance development --engine MySQL --engine-version 5.5.27 --db-instance-class db.t1.micro --allocated-storage 5 --master-username dev --master-user-password dev123 --db-security-groups production --backup-retention-period 3

  [ AWS RDSのMysql設定がインスタンス立ち上げた状態ではUTF-8になってなく、文字化けで困った時の対処メモ]
  
        $ rds-create-db-parameter-group development -f mysql5.5 -d "DB Parameter Group for utf8"
        $ rds-modify-db-parameter-group development -p "name=character_set_client, value=utf8, method=immediate"
        $ rds-modify-db-parameter-group development -p "name=character_set_connection, value=utf8, method=immediate"
        $ rds-modify-db-parameter-group development -p "name=character_set_database, value=utf8, method=immediate"
        $ rds-modify-db-parameter-group development -p "name=character_set_results, value=utf8, method=immediate"
        $ rds-modify-db-parameter-group development -p "name=character_set_server, value=utf8, method=immediate"

    RDSインスタンスのDB Parameter Groupをdevelopmentに更新

  * MySQLサーバのセットアップ

        $ sudo yum install expect
        $ mkpasswd
        パスワード
        mzH6bS1x- (hcoss_product)
        55Hmh0;ks (hcoss_development)
        % sudo -s
        % echo "mzH6bS1x-" > /root/mysql_hcoss_product_password
        % echo "55Hmh0;ks" > /root/mysql_hcoss_development_password
        % chmod 400 /root/mysql_*_password
        % exit

  * 接続の確認

        mysql -h development.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com -P 3306 -u dev -p
        Enter password:dev123
        パスワードの変更はAWSコンソールから実行する
        mysql -h development.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com -P 3306 -u dev -p
        Enter password:55Hmh0;ks

      [ AWS RDSのMysql設定がインスタンス立ち上げた状態ではUTF-8になってなく、文字化けで困った時の対処メモ]: http://qiita.com/items/341ca51b4f8a510b60ba


### 6.3) プロジェクトのチェックアウト(ローカル開発環境）

  * プロジェクトの作成
  * ユーザーの登録
  * プロジェクトのチェックアウト

    ALMiniumでは、認証機関に署名されていないSSL証明書を利用するので、SSLで利用する証明書による検証を無効にする必要があります。
      
        $ git config -global http.sslverify false 
        $ git clone [https://dev.k2-works.net/git/hcoss]

  * railsアプリケーションの作成

    チェックアウトしたプロジェクトに移動後以下のコマンドを実行
      
        $ rails new .
        $ git add .
        $ git commit -a
        $ git push -u origin master

### 6.4) Railsアプリケーション設定(サーバー環境）

#### 6.4.1) ステージング環境の構築

  * サーバーの準備（Cent OS 6.3編）  

      EC2インスタンスを構築時に完了

  * Ruby 1.9.3のインストール

      Aluminumインストール時に完了

  * 各種パッケージのインストール

      [サーバーの準備（CentOS 6.2編）]
      
        $ yum update
        $ yum -y install gcc gcc-c++ autoconf git
        $ yum -y install openssl-devel zlib-devel readline-devel curl-devel gettext-devel
        $ yum -y install httpd-devel sqlite-devel

  * libyamlのインストール

        $ cd /usr/local/src
        $ wget [http://pyyaml.org/download/libyaml/yaml-0.1.4.tar.gz]
        $ tar xzf yaml-0.1.4.tar.gz
        $ cd yaml-0.1.4
        $ ./configure
        $ make && make install

  * SELinuxの無効化

        $ setenforce 0
        エディタで /etc/sysconfig/selinux を開き、
        SELINUX=enforcing
        を
        SELINUX=disabled
        に変更してください。

  * ファイアウォールの設定

      system-config-firewall-tui コマンドを実行
      「カスタマイズ」を選択
      「WWW(HTTP)」を選択して「閉じる」
      「OK」を選択

  * 一般ユーザーの作成
  * Railsアプリケーションのセットアップ
  * railsユーザーの作成

        % sudo useradd -m -d /var/rails rails
        % sudo passwd rails
        % sudo chmod 750 /var/rails

  * Apache実行ユーザーをグループに追加

        % sudo gpasswd -a apache rails

  * RVMのインストール

        [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]
        bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )            bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )
        rvm pkg install libyaml
        rvm install ruby-1.9.3 -C --with-opt-dir=$HOME/.rvm/usr

  * ApacheとPhusion Passengerのセットアップ

      Aluminumインストール時に完了

  * データベースとの接続（MySQL編）
  * データベース接続の切り替え

        % sudo su - rails
        % cd railsdemo
        エディタで Gemfile を開き、
        gem 'sqlite3'
        を
        gem 'mysql2'
        に変更します。そして、Bundlerでmysql2ライブラリをインストールします。
        % bundle install
        config/database.yml
        production:
         adapter: mysql2
         database: railsdemo_production
         username: railsdemo
         password: diiNv2bid4aTI
         host: 127.0.0.1
         encoding: utf8
        % RAILS_ENV=production rake db:schema:load
        % RAILS_ENV=production rake db:seed

  * Railsアプリケーションの再起動

        % touch tmp/restart.txt

  * 日本語対応

        [Amazon RDS 文字化けと格闘]
        mysql> alter database development default character set utf8;
        mysql> show variables like '%character%';
        railsユーザーになってサイドDB migrateb% RAILS_ENV=production rake db:schema:load
        % RAILS_ENV=production rake db:seed

  * Gitレポジトリの作成
  * Gitレポジトリの作成

        まずリモートマシンにgitユーザーを作成します。
        $ sudo useradd -m -d /var/git git
        $ sudo passwd git
        $ sudo chmod 750 /var/git
        $ sudo gpasswd -a git apache
        railsユーザーをgitグループに加えます。/var/opt/aluminum/gitディレクトリの読み取り権限が与えられることになります。            railsユーザーをgitグループに加えます。/var/opt/aluminum/gitディレクトリの読み取り権限が与えられることになります。
        $ sudo gpasswd -a rails git
        $ sudo gpasswd -a rails apache
        ローカルマシンからあなたのSSH公開鍵をgitユーザーのホームディレクトリに転送します。
        $ scp -i k2works.pem /.ssh/id_rsa.pub git@dev.k2-works.net:
        SSH公開鍵をauthorized_keysに加えます。
        $ cat id_rsa.pub >> .ssh/authorized_keys
        $ rm id_rsa.pub
        $ sudo mkdir --mode=700 var/git.ssh
        $ sudo cp .ssh/authorized_keys var/git.ssh/
        $ sudo chown -R git:git var/git.ssh
        ローカルマシンからrailsユーザーとしてSSHで接続し、パスワードを尋ねられないことを確認します。
        % ssh git@dev.k2-works.net
        リポジトリへのシンボルリンクを作成する
        $ ln -s var/opt/alminium/git/hcoss hcoss.git

  * Capistranoによるデプロイ
  * SSH公開鍵の設置

        $ sudo mkdir --mode=700 var/rails.ssh
        $ sudo cp home/k2works.ssh/authorized_keys var/rails.ssh/
        $ sudo chown -R rails:rails var/rails.ssh
        ローカルマシンからrailsユーザーとしてSSHで接続し、パスワードを尋ねられないことを確認します。
        % ssh rails@railsdemo.k2-works.net

  * Capistranoの準備

        % gem install capistrano
        % capify .

        config/deploy.rb

         require 'bundler/capistrano'
        load 'deploy/assets'
        set :application, "railsdemo"
        set :deploy_to, "/var/rails/railsdemo"
        set :user, "rails"
        set :use_sudo, false
        set :local_repository, "git@demo.k2-works.net:railsdemo.git"
        set :repository, "/var/git/railsdemo.git"
        set :branch, "master"
        set :scm, :git
        set :deploy_via, :remote_cache
        set :normalize_asset_timestamps, false
        set :keep_releases, 3
        role :web, "demo.k2-works.net"
        role :app, "demo.k2-works.net"
        role :db,  "demo.k2-works.net", :primary => true
        after "deploy:update", :roles => :app do
          run "cp #{shared_path}/config/database.yml
        #{release_path}/config/"
        end
        after "deploy:update", "deploy:cleanup"
        namespace :deploy do
          desc "Restarts your application."
          task :restart, :roles => :app do
            run "touch #{current_path}/tmp/restart.txt"
          end
        end
        
       次のコマンドを実行します
       
        % cap deploy:setup
        
       エディタで Gemfile を開き、gem 'sqlite3' の部分を gem 'mysql2' あるいは gem
      'pg' と書き換えます。また、
        # gem 'therubyracer'
        を次のように書き換えます。
        
        gem 'therubyracer', :platform => :ruby
        $bundle install
        railsユーザーでリモートホストにログインして以下のコマンドを順に実行します。
        $ cd /var/rails/railsdemo/shared
        $ mkdir config
        
       MySQLを利用している場合は、新規ファイル
      /var/rails/railsdemo/shared/config/database.yml を次の内容で作成します。
     
         production:
         adapter: mysql2
         database: railsdemo_production
         username: railsdemo
         password: diiNv2bid4aTI
         host: railsdemo.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com                                  host: railsdemo.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com
         encoding: utf8
        $ cap deploy

  * 仮想ホストの設定変更

       sudo権限のあるユーザー(kuroda)でリモートホストにログインして、/etc/httpd/sites-available/railsdemo を次のように修正します（要sudo）。                            sudo権限のあるユーザー(kuroda)でリモートホストにログインして、/etc/httpd/sites-available/railsdemo を次のように修正します（要sudo）。

        <VirtualHost *:80>
         ServerName asagao.oiax.jp
         DocumentRoot /var/rails/railsdemo/current/public
         RackEnv production
         <Directory /var/rails/railsdemo/current/public>
         AllowOverride all
         Options -MultiViews
         </Directory>
         </VirtualHost>

       パスの /public の前に current を追加しています（2カ所）。
       そして、Apacheをリロードします。
       
        $ sudo service apache2 reload # Ubuntu Server 12.04/10.04

       LTS の場合               

  * ステージング環境の設定

       [Rails本番環境構築ガイド]
       [Capistrano 複数環境へのデプロイ]

  * staging環境のデータベースの準備

        mysql> CREATE DATABASE hcoss_staging DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
        mysql> GRANT ALL ON hcoss_staging.* TO 'hcoss'@'localhost';
        mysql> SET PASSWORD FOR 'hcoss'@'localhost' = PASSWORD('55Hmh0;ks');
        mysql> alter database hcoss_staging default character set utf8;
        mysql> show variables like '%character%';
        exit

  * Gemfileの追加

        Gemfileを追加して、bundle installを実行。
        group :deployment do
        # Capistraono (Deploy支援)
          gem 'capistrano'
          gem 'capistrano-ext'
          gem 'capistrano_colors'
          gem 'rvm-capistrano'
        end
        # メンテナンスモード画面の表示
        gem 'turnout'

  * Capistranoの設定フィルを生成

        $ capify .
        続いて、staging環境/production環境専用のCapistrano設定ファイルを作成。
        mkdir config/deploy
        touch config/deploy/staging.rb
        touch config/deploy/production.rb

  * Capistrano共通のデプロイ設定

        config/deploy.rb

  * Capistrano Staging環境のデプロイ設定

        config/deploy/staging.rb

  * Capistrano Producion環境のデプロイ設定

        config/deploy/production.rb

  * メンテナンス画面の設定

        config/maintenace.yml

  * DB設定

        database.yml

  * デプロイ前のチェックリスト
  * deploy.rb, staging.rb, production.rbのパラメータをすべて設定したかチェック
  * ステージングDB、本番DBの設定をdatabase.ymlに追加しているか？
  * デプロイ用Gitリポジトリのブランチが最新の状態か？
  * デプロイ手順

        cap staging deploy:setup
        cap staging deploy
        cap production deploy:setup
        cap production deploy      

  * Apachバーチャルホストを設定

        sudo vi /etc/httpd/conf/httpd.conf
        #ServerName centossrv.com:80行頭に#を追加してコメントアウト
        NameVirtualHost *:80コメント解除(バーチャルホスト有効化)
        sudo vi /etc/httpd/conf.d/vhost.conf
        <VirtualHost *:80>
          <Location />
            <IfModule mod_deflate.c>
                SetOutputFilter DEFLATE
                SetEnvIfNoCase Request_URI \
                    \.(?:gif|jpe?g|png)$ no-gzip dont-vary
                Header append Vary User-Agent env=!dont-vary
            </IfModule>
          </Location>
          ServerName hcoss.dev.k2-works.net
          ServerAlias *.dev.k2-works.net
          DocumentRoot var/rails/hcoss/current/public
          RailsEnv production
          PassengerEnabled on
          RemoveHandler .cgi .php
        </VirtualHost>

        [サーバーの準備（CentOS 6.2編）]: http://www.oiax.jp/rails3book/prepare_centos_6_2.html
        [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]: http://morizyun.github.io/blog/rvm-install-centos-ruby-rails/
        [Amazon RDS 文字化けと格闘]: http://www.teps4545.com/2010/01/amazon-rds.html
        [Rails本番環境構築ガイド]: http://www.oiax.jp/rails3book/deploy.html
        [Capistrano 複数環境へのデプロイ]: http://morizyun.github.io/blog/capistrano-localhost-multi-deploy/


#### 6.4.2) 本番環境の構築

  * サーバーの準備（Ubuntu Server 12.04 LTS編）  

      [Rails本番環境構築ガイド]
      
        % sudo apt-get update
        % sudo apt-get upgrade
        % sudo apt-get install build-essential automake git
        % sudo apt-get install zlib1g-dev libssl-dev libreadline6-dev
        libyaml-dev libxml2-dev libxslt-dev
        % sudo apt-get install libsqlite3-dev libcurl4-openssl-dev
        % sudo apt-get install apache2 openssh-server apache2-prefork-dev libapr1-dev libaprutil1-dev
        % sudo apt-get install imagemagick libmagickwand-dev

  * Ruby 1.9.3のインストール

        % mkdir ~/src
        % cd ~/src
        % wget [http://ftp.ruby-lang.org/pub/ruby/1.9/ruby-1.9.3-p392.tar.gz]
        % tar xzf ruby-1.9.3-p392.tar.gz
        % cd ruby-1.9.3-p392
        % ./configure
        % make
        % sudo make install

  * Railsアプリケーションのセットアップ
  * railsユーザーの作成

         % sudo useradd -m -d /var/rails rails
         % sudo passwd rails
         % sudo chmod 750 /var/rails

  * Apache実行ユーザーをグループに追加

         % sudo gpasswd -a www-data rails

  * ApacheとPhusion Passengerのセットアップ
  * Phusion Passengerのインストール

         % sudo gem install passenger --no-ri --no-rdoc
         % sudo passenger-install-apache2-module             

  * Apacheの準備

        % sudo -s
        $ mkdir /var/www/html
        $ cd /etc
        $ ln -s apache2 httpd
        $ cd httpd
        $ echo "ServerName www.example.com:80" >> httpd.conf

  * Phusion PassengerをApacheに組み込む

        /etc/httpd/conf.d/passenger.conf
         LoadModule passenger_module /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.19/ext/apache2/mod_passenger.so              LoadModule passenger_module /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.19/ext/apache2/mod_passenger.so
         PassengerRoot /usr/local/lib/ruby/gems/1.9.1/gems/passenger-3.0.19
         PassengerRuby /usr/local/bin/ruby

  * バーチャルホストの追加

        /etc/httpd/sites-available/default 
        <VirtualHost *:80>
          DocumentRoot /var/www/html
          <Directory /var/www/html>
            AllowOverride all
            Options None
            Order Deny,Allow
            Deny from All
          </Directory>
        </VirtualHost>
        /etc/httpd/sites-available/railsdemo
        <VirtualHost *:80>
         ServerName [http://railsdemo.k2-works.net]
         DocumentRoot /var/rails/railsdemo/public
         RackEnv production
         <Directory /var/rails/railsdemo/public>
           AllowOverride all
           Options -MultiViews
         </Directory>
        </VirtualHost>
        $ ln -s /etc/httpd/sites-available/railsdemo/etc/httpd/sites-enabled/001-railsdemo
        
        EC2ではバーチャルホストがうまくいかない
        [http://hivecolor.com/id/9]
        Route53でサブドメインを設定しておく

  * Apacheの再起動

         $ service apache2 restart

  * データベースとの接続（MySQL編）
  * MySQLサーバのセットアップ

        パスワード
        gnDwPsFVM5kMU (root)
        diiNv2bid4aTI (railsdemo)
        % sudo -s
        % echo "gnDwPsFVM5kMU" > /root/mysql_root_password
        % echo "diiNv2bid4aTI" > /root/mysql_railsdemo_password
        % chmod 400 /root/mysql_*_password
        % exit
        MySQLを初期化します。
        % sudo mysql_install_db

  * データベースおよびユーザーの作成

        mysql -u root コマンドでMySQLモニターを開きます。
        $ show databases;
        rootユーザーのパスワードを変更します。
        $ SET PASSWORD FOR 'root'@'localhost' = PASSWORD('gnDwPsFVM5kMU');
        railsdemo_productionデータベースを作り、railsdemoユーザーに全権を与えます。
        $ CREATE DATABASE railsdemo_production DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
        $ GRANT ALL ON railsdemo_production.* TO 'railsdemo'@'localhost';
        $ SET PASSWORD FOR 'railsdemo'@'localhost' = PASSWORD('diiNv2bid4aTI');               
        MySQLモニターを抜けます。
        $ quit

  * データベース接続の切り替え

        % sudo su - rails
        % cd railsdemo
        エディタで Gemfile を開き、
        gem 'sqlite3'
        を
        gem 'mysql2'
        に変更します。そして、Bundlerでmysql2ライブラリをインストールします。
        % bundle install
        config/database.yml
        production:
         adapter: mysql2
         database: railsdemo_production
         username: railsdemo
         password: diiNv2bid4aTI
         host: 127.0.0.1
         encoding: utf8
        % RAILS_ENV=production rake db:schema:load
        % RAILS_ENV=production rake db:seed

  * Railsアプリケーションの再起動

        % touch tmp/restart.txt

  * 日本語対応

        [Amazon RDS 文字化けと格闘]
        mysql> alter railsdemo_production mydb default character set utf8;
        mysql> show variables like '%character%';
        railsユーザーになってサイドDB migrateb% RAILS_ENV=production rake db:schema:load
        % RAILS_ENV=production rake db:seed

  * Gitレポジトリの作成
  * Gitレポジトリの作成

        まずリモートマシンにgitユーザーを作成します。
        $ sudo useradd -m -d /var/git git
        $ sudo passwd git
        $ sudo chmod 750 /var/git
        railsユーザーをgitグループに加えます。/var/gitディレクトリの読み取り権限が与えられることになります。
        $ sudo gpasswd -a rails git
        ローカルマシンからあなたのSSH公開鍵をgitユーザーのホームディレクトリに転送します。
        % scp -i k2works.pm .ssh/id_rsa.pub ubuntu@:54.248.228.199:~
        SSH公開鍵をauthorized_keysに加えます。
        $ mkdir -m 700 .ssh
        $ cat id_rsa.pub >> .ssh/authorized_keys
        $ chmod 600 .ssh/authorized_keys
        $ rm id_rsa.pub
        空のレポジトリ asagao.git を作成します。
        $ mkdir railsdemo.git
        $ git init --bare --shared=0640 railsdemo.git

  * レポジトリにソースコードを登録

        ローカルマシンのrailsdemoディレクトリに移動して、以下のコマンドを順に実行します。
        % git init
        % git add .
        % git commit -m 'initial commit'
        % git remote add origin git@railsdemo.k2-works.net:railsdemo.git
        % git push origin master           

  * Capistranoによるデプロイ
  * 本番・ステージング環境の設定

        [Capistrano 複数環境へのデプロイ]

  * staging/production環境のデータベースの準備
  * Gemfileの追加
  * Capistranoの設定フィルを生成
  * Capistrano共通のデプロイ設定
  * Capistrano Staging環境のデプロイ設定
  * Capistrano Producion環境のデプロイ設定
  * メンテナンス画面の設定
  * デプロイ前のチェックリスト
  * デプロイ手順
  * Apachバーチャルホストを設定
  * SSH公開鍵の設置

        $ sudo mkdir --mode=700 var/rails.ssh
        $ sudo cp home/k2works.ssh/authorized_keys var/rails.ssh/
        $ sudo chown -R rails:rails var/rails.ssh

    ローカルマシンからrailsユーザーとしてSSHで接続し、パスワードを尋ねられないことを確認します。
      
        % ssh rails@railsdemo.k2-works.net

  * Capistranoの準備

         % gem install capistrano
         % capify .
         config/deploy.rb
         require 'bundler/capistrano'
         load 'deploy/assets'
         set :application, "railsdemo"
         set :deploy_to, "/var/rails/railsdemo"
         set :user, "rails"
         set :use_sudo, false
         set :local_repository, "git@demo.k2-works.net:railsdemo.git"
         set :repository, "/var/git/railsdemo.git"
         set :branch, "master"
         set :scm, :git
         set :deploy_via, :remote_cache
         set :normalize_asset_timestamps, false
         set :keep_releases, 3
         role :web, "demo.k2-works.net"
         role :app, "demo.k2-works.net"
         role :db,  "demo.k2-works.net", :primary => true
         after "deploy:update", :roles => :app do
           run "cp #{shared_path}/config/database.yml
         #{release_path}/config/"
         end
         after "deploy:update", "deploy:cleanup"
         namespace :deploy do
           desc "Restarts your application."
           task :restart, :roles => :app do
             run "touch #{current_path}/tmp/restart.txt"
           end
         end
        次のコマンドを実行します
         % cap deploy:setup
         エディタで Gemfile を開き、gem 'sqlite3' の部分を gem 'mysql2' あるいは gem 'pg' と書き換えます。また、
         # gem 'therubyracer'
         を次のように書き換えます。
         gem 'therubyracer', :platform => :ruby
         $bundle install
         railsユーザーでリモートホストにログインして以下のコマンドを順に実行します。
         $ cd /var/rails/railsdemo/shared
         $ mkdir config
       MySQLを利用している場合は、新規ファイル
       /var/rails/railsdemo/shared/config/database.yml を次の内容で作成します。

         production:
           adapter: mysql2
           database: railsdemo_production
           username: railsdemo
           password: diiNv2bid4aTI
           host: railsdemo.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com                                  host: railsdemo.ccebcwxdebti.ap-northeast-1.rds.amazonaws.com
           encoding: utf8
         $ cap deploy

  * 仮想ホストの設定変更

                sudo権限のあるユーザー(kuroda)でリモートホストにログインして、/etc/httpd/sites-available/railsdemo を次のように修正します（要sudo）。                            sudo権限のあるユーザー(kuroda)でリモートホストにログインして、/etc/httpd/sites-available/railsdemo を次のように修正します（要sudo）。
                <VirtualHost *:80>
                ServerName asagao.oiax.jp
                DocumentRoot /var/rails/railsdemo/current/public
                RackEnv production
                <Directory /var/rails/railsdemo/current/public>
                AllowOverride all
                Options -MultiViews
                </Directory>
                </VirtualHost>
                パスの /public の前に current を追加しています（2カ所）。
                そして、Apacheをリロードします。
                 $ sudo service apache2 reload # Ubuntu Server 12.04/10.04
               LTS の場合               
                 [Rails本番環境構築ガイド]: [http://www.oiax.jp/rails3book/deploy.html]                              [Rails本番環境構築ガイド]: [http://www.oiax.jp/rails3book/deploy.html]
                 [知っておきたいApacheの基礎知識 その1]:
               [http://gihyo.jp/admin/serial/01/unix/0005]
                 [Amazon RDS 文字化けと格闘]: [http://www.teps4545.com/2010/01/amazon-rds.html]                              [Amazon RDS 文字化けと格闘]: [http://www.teps4545.com/2010/01/amazon-rds.html]
                 [Capistrano 複数環境へのデプロイ]:
               [http://morizyun.github.io/blog/capistrano-localhost-multi-deploy/]

               [Rails本番環境構築ガイド]: http://www.oiax.jp/rails3book/deploy.html


## 7) CI環境の構築

### 7.1) 自動テスト

#### 7.1.1) Railsプロジェクトの作成

  * node.jsインストール

       [Mac OS X と homebrew なら驚くほど簡単に node.js で HelloWorld]
       $ruby -e "$(curl -fsSkL raw.github.com/mxcl/homebrew/go)"
       $brew install node

  * Railsのインストール     
  * RSpecのインストール

       [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル]
       Gemfile
       group :test, :development do
         gem 'rspec-rails', '~>2.0'
       end
       $bundle install
       $rails generate rspec:install
       $rake db:create
       $rake db:migrate
       $rake spec

       [Mac OS X と homebrew なら驚くほど簡単に node.js で HelloWorld]: http://takatamajp.wordpress.com/2012/11/17/install_nodejs_on_mac_os_x_using_homebrew/
       [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル]: http://qiita.com/items/bf1bc376d88186050f3f


#### 7.1.2) Capybara-webkitのインストール

  * QTライブラリのインストール

       [RSpecとCapybaraでJavaScript/Ajaxをテストする]     
       $brew install qt

  * Capybara-webkitのインストール

       Mac環境ではheadlessはいらない
       サーバーにはインストールすること

  * CentOS6.3の場合

         [Installing Qt and compiling capybara webkit]
         [CentOS6.3 の Jenkins 上で jasmine-headless-webkit を走らせる]
         rpm -i [http://dl.atrpms.net/el6-x86\_64/atrpms/stable/atrpms-repo-6-6.el6.x86\_64.rpm]              rpm -i [http://dl.atrpms.net/el6-x86\_64/atrpms/stable/atrpms-repo-6-6.el6.x86\_64.rpm]
         yum install --enablerepo=atrpms-testing qt47-webkit-devel
         export QMAKE=/usr/bin/qmake-qt47
         cd /usr/bin
         sudo ln -s qmake-qt47 qmake
         sudo ln -s qmake-qt47 qmake-qt4
         group :test, :development do
         gem 'rspec-rails','~>2.0'
         gem 'database_cleaner'
         end 
         group :test do
         gem 'headless'
         gem 'capybara-webkit'
         end 
         $bundle install
         spec/spec_helper.rb
         config.before(:suite) do
           DatabaseCleaner.strategy = :truncation
           DatabaseCleaner.clean_with(:truncation)
         end
         config.before(:each) do
          DatabaseCleaner.start
         end
         config.after(:each) do
          DatabaseCleaner.clean
         end
         Capybara.javascript_driver = :webkit
         $ rake spec

       [RSpecとCapybaraでJavaScript/Ajaxをテストする]: http://www.oiax.jp/rails/zakkan/testing_javascript_with_rspec_and_capybara.html
       [Installing Qt and compiling capybara webkit]: https://github.com/thoughtbot/capybara-webkit/wiki/Installing-Qt-and-compiling-capybara-webkit
       [CentOS6.3 の Jenkins 上で jasmine-headless-webkit を走らせる]: http://tomykaira.hatenablog.com/entry/2012/07/27/103122
       [http://dl.atrpms.net/el6-x86\_64/atrpms/stable/atrpms-repo-6-6.el6.x86\_64.rpm]: http://dl.atrpms.net/el6-x86_64/atrpms/stable/atrpms-repo-6-6.el6.x86_64.rpm


#### 7.1.3) テストサーバー

  * Sport

    [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル（その２）]
    
        $ vim Gemfile
        Gemfile
        group :test, :development do
        gem 'rspec-rails','~>2.0'
        gem 'database_cleaner'
        gem 'spork','0.9.2'
        end  
        spork --bootstrap
        $ vim spec/spec_helper.rb
      一通りSpork.prefork do・・・endに入れる
      
        require 'rubygems'
        require 'spork'
        #uncomment the following line to use spork with the debugger
        #require 'spork/ext/ruby-debug'
        Spork.prefork do
        # Loading more in this block will cause your tests to run faster.
         However,
        # if you change any configuration or code from libraries loaded here,
  you'll
    # need to restart spork for it take effect.
    # This file is copied to spec/ when you run 'rails generate
  rspec:install'
    ENV["RAILS_ENV"] ||= 'test'
    require File.expand_path("../../config/environment", FILE
    require 'rspec/rails'
    require 'rspec/autorun'
    # Requires supporting ruby files with custom matchers and macros, etc,
    # in spec/support/ and its subdirectories.
    Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}
    RSpec.configure do |config|
    # ## Mock Framework
    #
    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate
  line:
    #
    # config.mock_with :mocha
    # config.mock_with :flexmock
    # config.mock_with :rr
    # Remove this line if you're not using ActiveRecord or ActiveRecord
  fixtures
    config.fixture_path = "#{::Rails.root}/spec/fixtures"
    # If you're not using ActiveRecord, or you'd prefer not to run each of
  your
    # examples within a transaction, remove the following line or assign
  false
    # instead of true.
    config.use_transactional_fixtures = true
    # If true, the base class of anonymous controllers will be inferred
    # automatically. This will be the default behavior in future versions of
    # rspec-rails.
    config.infer_base_class_for_anonymous_controllers = false
    end
    end
    Spork.each_run do
    # This code will be run each time you run your specs.
    end
    $ vim .rspec
    .rspec

  * -colour
  * -drb

    $ spork       

    [これからテストを書き始めたい人のための Rails+RSpec+Spork+FactoryGirl チュートリアル（その２）]: http://qiita.com/items/fbe0a4ac2269a743dc17


#### 7.1.4) jenkinsのインストール
      Jenkins Update
      [http://d.hatena.ne.jp/tadasy/20111109/1320842690]
      [http://shogogg.hatenablog.jp/entry/20120410/1334048401]
      wget [http://mirrors.jenkins-ci.org/war/latest/jenkins.war]
      sudo service jenkins stop
      sudo rm usr/lib/jenkins/jenkins.war     sudo mv jenkins.war
    /usr/lib/jenkins
      sudo service jenkins start

#### 7.1.5) RailsをビルドするためのJenkinsセットアップ

  * RVMの設定

       [Ubuntu Server 12.04 LTS + RVM + ruby1.9 + Rails3の環境を構築してみた]

  * RVMのインストール

      [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]
      bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )        bash -s stable < <(curl -s [https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer] )
      rvm pkg install libyaml
      rvm remove 1.9.1    
      rvm install ruby-1.9.3 -C --with-opt-dir=$HOME/.rvm/usr    

  * Git Plugin
  * RVM Plugin
  * Rake Plugin
  * Jenkins及びプラグインの設定
  * gitの設定
  * Git pluginの設定
  * Rakeの設定（空欄のまま）
  * E-mail通知の設定

  [Ubuntu Server 12.04 LTS + RVM + ruby1.9 + Rails3の環境を構築してみた]: http://blog.opensquare.jp/?p=1667
  [さくらVPS/CentOS 6.3 Ruby 1.93/RVMのインストール手順Railsサーバへの道]: http://morizyun.github.io/blog/rvm-install-centos-ruby-rails/



#### 7.1.6) Railsをビルドするジョブを作成する
      [Jenkins@さくらVPSにOctopressのデプロイを任せてみる]
      cp .ssh/known_hosts var/lib/jenkins.ssh/

  * Rake Pluginを使ってビルドする
  * シェルスクリプトを使ってビルドする

       gem install bundle --no-ri --no-rdoc
       bundle install
       rake db:setup
       rake spec

       [Jenkins@さくらVPSにOctopressのデプロイを任せてみる]: http://www.tokoro.me/2012/07/29/jenkins-octopress/    


### 7.2) コードインスペクション

#### 7.2.1) コードカバレッジ分析

  * Gemをインストールする

       group :test do
        #ローカル開発では使わない
        # gem 'headless'
        gem 'capybara-webkit'
        gem 'simplecov', :require => false
        gem 'simplecov-rcov', :require => false
       end

  * spec/spec_helpler.rbの頭に追加

       require 'simplecov'
       require 'simplecov-rcov'
       SimpleCov.formatter = SimpleCov::Formatter::RcovFormatter
       SimpleCov.start 'rails'

  * .gitignoreにcoverage追加
  * Ruby metrics plugin

       ビルド後の処理の追加   

#### 7.2.2) コード品質の検査

  * rails_best_practicesをGemに追加

      group :test, :development do
        gem 'rspec-rails','~>2.0'
        gem 'database_cleaner'
        gem 'spork','0.9.2'
        gem 'rails_best_practices', :require => false
       end     

  * rails_bes_practices.sh追加
  * ビルド手順の追加からシェルの実行を追加

       bash script/rails_best_paractices.sh

  * Plot Plugin

       ビルド後の処理でビルドデータをプロットを追加

  * .gitignoreにreportsを追加


#### 7.2.3) 重複コード（コピー＆ペースト）の検出
      [CentOSにAntをインストールする]

  * pmdインストール     
  * sudo apt-get install ant
  * tools/build.xml追加
  * DRY Plugin

       ビルド手順の追加からAntの呼び出しを追加
       ビルド後の処理に重複コード分析の集計を追加

  * .gitignoreへの追加

       tools/pmd/doc

       [CentOSにAntをインストールする]: http://blog.justoneplanet.info/2010/12/03/centos%E3%81%ABant%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B/


### 7.3) ドキュメント生成

#### 7.3.1) Ruby,Railsでのドキュメント生成

  * YARDを使ってドキュメントを生成し、閲覧できるようにする

      group :test, :development do
       gem 'rspec-rails','~>2.0'
       gem 'database_cleaner'
       gem 'spork','0.9.2'
       gem 'rails_best_practices', :require => false
       gem 'yard', :require => false
      end     

  * HTML Publisher Plugin

       ビルド手順の追加からシェルの実行を選択して yard doc
       ビルド後の処理の追加からPublish HTML Reports追加

#### 7.3.2) Ruby,Railsでのデプロイ

  * 新しいジョブを作るblog_deploy
  * ソースコード管理システムはblogジョブと同様に設定する
  * ビルド・トリガセクション内で他のプロジェクトのビルド後にビルドにチェックを入れる
  * Run the build in a RVM-managed environmentもblogジョブと同様に設定しておく
  * ビルドのセクションではシェルスクリプトの実行を選びcap deployを入力する** デプロイ


### 7.4) 分散ビルド

  * 自動テストとコードインスペクションの分割
  * 自動テストの種類での分割
  * ビルドフローの起点の設定とフローに潜む問題の解決

      Jenkins Parameterized Trigger plugin
      Join plugin
      Build Pipeline Plugin
